GCP Certified Professional Cloud Architect
---------------------------------
Channels > My Channels > GCP Cloud Architect
22 Hours
List of courses:
NOTE:  This course has been updated to 8 Video Courses / 26h 26m  
#############################################################################
## Google Cloud Platform Fundamentals - Core Infrastructure:
 ✓ Introducing Google Cloud Platform
 ✓ Resources and Access in the Cloud
 ✓ Virtual Machines and Networks in the Cloud
 ✓ Storage in the Cloud
 ✓ Containers in the Cloud
 ✓ Applications in the Cloud
 ✓ Developing and Deploying in the Cloud
 ✓ Logging and Monitoring in the Cloud
 ✓ Course Summary

#############################################################################
## Essential Cloud Infrastructure: Foundation
 ✓ Introduction
 ✓ Interacting with Google Cloud
 ✓ Virtual Networks
 ✓ Virtual Machines 
 ✓ Course Resources

#############################################################################
## Essential Google Cloud Infrastructure: Core Services
 - Introduction
 - Identity and Access Management (IAM)
 - Storage and Database Services
 - Resource Management
 - Resource Monitoring
 - Course Resources

#############################################################################
## Essential Google Cloud Infrastructure: Scaling and Automation
 - Introduction
 - Interconnecting Networks 
 - Load Balancing and Autoscaling
 - Infrastructure Automation
 - Managed Services
 - Course Resources

#############################################################################
## Reliable Google Cloud Infrastructure: Design and Process
 - Introduction
 - Defining Services
 - Microservice Design and Architecture
 - DevOps Automation
 - Choosing Storage Solutions
 - Google Cloud and Hybrid Network Architecture
 - Deploying Applications to Google Cloud
 - Designing Reliable Systems
 - Security
 - Maintenance and Monitoring
 - Course Resources

#############################################################################
## Getting Started with Google Kubernetes Engine 
 - Introduction
 - Introduction to Google Cloud
 - Introduction to Containers and Kubernetes
 - Kubernetes Architecture

#############################################################################
## Logging, Monitoring and Observability in Google Cloud
 - Introduction
 - Introduction to Monitoring in Google CLoud
 - Avoiding Customer Pain
 - Alerting Policies
 - Monitoring Critical Systems
 - Configuring Google Cloud Services for Observability
 - Advanced Loging and Analysis
 - Monitoring Network Security and Audit Logs
 - Managing Incidents
 - Investigating Application Performance Issues
 - Optimize the Costs of Monitoring
 - Course Resources

#############################################################################
## Preparing for the Professional Cloud Architect Exam
 - Welcome to Preparing for the Professional Cloud Architect Exam
 - Sample Case Studies 
 - Designing and Implementing
 - Optimizing and Operating
 - Resources and next steps
 - Course Resources



## Links
########################### 
- Professional Cloud Architect 
https://cloud.google.com/certification/cloud-architect

- Professional Cloud Architect Exam Guide
https://cloud.google.com/certification/guides/professional-cloud-architect/

- Professional Cloud Architect Sample Questions
https://cloud.google.com/certification/practice-exam/cloud-architect

- Certification Prep: Professional Cloud Architect
https://cloudonair.withgoogle.com/events/next20-studyjam/watch?talk=w3-talk-4

- Official Google Cloud Professional Cloud Architect Study Guid3e
https://cloudonair.withgoogle.com/events/next20-studyjam/resources

- GCP Free Tier
https://cloud.google.com/free/

- Google Cloud Documentation, ongoing review
https://cloud.google.com/docs/

- Getting Started: Create and Mange Cloud Resources, Skill Badge
https://google.qwiklabs.com/quests/120

- Foundational Infrastructure Tasks, Skill Badge
https://google.qwiklabs.com/quests/118

- Setup and Configure Cloud Environments Skill Badge
https://www.qwiklabs.com/quests/119

- Deploy and Manage Cloud Environments Skill Badge
https://google.qwiklabs.com/quests/121

- Professional Cloud Architecture Sample Questions
https://cloud.google.com/certification/guides/professional-cloud-architect/





##~~ ----------------------------  NEW NOTES START HERE  ---------------------------- ~~##

##########################################################################
## Google Cloud Platform Fundamentals - Core Infrastructure: 
##########################################################################

############################################
## Introducing Google Cloud 
  Cloud Waves
    - First  Wave: Colocation
    - Second Wave: Virtualized Data Center
    - Third  Wave: Container-based architecture

## Iaas / PaaS / SaaS 
  IaaS:  Infrastructure As A Service 
    - pay for what they allocate

  PaaS:  Platform As A Service 
    - pay for what they use

  Serverless: 
    - concentrate on code / not managing infrastructure 
      - Cloud Functions
      - Cloud Run: deploy containerized microservice in fully managed environment

  SaaS:  Software as a Service
        - Gmail, Docs, Drive

## Google Cloud Network
  100+ content caching nodes worldwide
  5 Major GeoLocations: N. America, S. America, EU, Asia, Australia

  Location > Regions > Zones
  London:
    Europe -> europe-west2 -> europe-west2-a  
                              europe-west2-b
                              europe-west2-c
  multi-region support:
    Cloud Storage -> Europe -> London / Belgium 
        Stores in multiple regions, redundantly in 2 geolocations 160km apart

  ** 103 Zones
  ** 34 Regions
  cloud.google.com/about/locations

## Security
  - Hardware infrastructure
  - Service deployment:  encrypted RPC
  - User Identtity 
  - Storage Services: encryption at rest
  - Internet Communication :   Google Front End  
                               Denial of Service Proection
  - Operational Security   :   Intrusion Detection
                               Reducing insider risk
                               Universal Second Factor (U2F) 
                               Software Dev Practices

## Open Source Ecosystem
  - Open Sources Licenses key technology i.e. Tensor Flow

## Pricing and Billing
  - Per second billing
  - Compute Engine:  sustained-use discounts
    - discount for more thatn 25% of month

  - Budgets
      assigned at billing account or project level
  - Alerts 
  - Reports 
  - Quotas (on resource @ project level)
    - rate quota      :  Rests after a specific time
    - allocation quota:  number of resources in a project
            ex.  5 VPC networks
cloud.google.com/products/calculator


############################################
## Resources and Access in the Cloud

# Google Cloud Resource Heirarchy  ( Org > Folder > Project > Resource )
    Organization Node
      |
       ->Folder  
           |
           |--------------------|
           |                    |
           -> Project            -> Project
                 |                    |              
                 -> Resources         -> Resources

Policies can be applied at Project / Folder / Organization level as well as Resource
** NOTE: Policies inherited downward
        ex. Apply policy to folder, policy is inherited by Project

- Projects 
  - Separate entities under Org Node
  - Projects hold resources
      ** NOTE: RESOURCE CAN ONLY BELONG TO ONE PROJECT 
  - Projects can have different owners / users 
      - billed and managed separately


    Project ID                    Project Name          Project Number
    ----------                   ---------------        ---------------
 - Globally unique              - Not unique            - Globally unique
 - Assigned by Google Cloud *   - Chosen by user        - Assigned by GCP
 - Immutable after creation     - Mutable               - Immutable 


* = mutable during cration

Resource Manager Tool
 - API (RPC / REST) CRUD / List Projects 


- Folders
    - Assign policies to resources at granularity  
    - Folders can contain projects and other folders


- Organization Node (different roles)
  - Org Policy Administrator
  - Project Creator Role
  - Google Workspace Customer 
      - Projects will belong to Organization Node
  - Non-Google Workspace Customer 
      - Use Cloud Identity to create Orginization node


# Identity and Access Management

 - Apply policies: who can do what on which resources

who:  google account, google group, service account, cloud identity domain
can do what:  role 
    - role == collection of permissions

role / policy inherits downward:  folder -> project -> resources


** 3 Cloud IAM Role Types:
  - Basic:       Owner, Editor, Viewer, Billing Admin  (broad permissions)
  - Predefined:  Services offer predefined roles and where they can be used:
                  - Compute Engine >>   Instance Admin Role                 
  - Custom:      Least privileged model, more granular role
              i.e. Instance Operator:  get, list, start, stop   (No Create / Delete)

          NOTE:  Custom Roles can only be applied to Project or Organization Level


# Service Accounts

 Give permissions to a resource and NOT a person
  - named with email address
        PROJECT_NUMBER-compute@developer.gserviceaccount.com
        PROJECT_ID@appspot.gserviceaccount.com
  - use cryptographic keys (instead of passwords)

** NOTE: Service Accounts NEED TO BE MANAGED

Service Account is a resource
  - can have IAM Policies attached to it 
      i.e. Editor (read / write)  vs. Viewer (read)


# Cloud Identity 

  Tool for organizations to define policies and manage users and groups w/ Google Admin Console

 - Can log in and manage resources with existing Active Directory or LDAP systems
 - Google Admin Console can disable user accounts and remove from groups
 - Available in free / premium editions
 - Already available to Google Workspace customers in Google Admin Console


# Interacting with Google Cloud

4 Ways to Interact w/ GCP
  1. Cloud Console
  2. Cloud SDK / Cloud Shell
  3. APIs
  3. Cloud Console Mobile App


  - Console 
      - Web-based admin UI
      - Manage / Create projects
      - Access to GCP APIs
      - Access to Cloud Shell
         - temp VM w/ Google Cloud SDK installed


  - Cloud Shell / SDK 
      - CLI for Cloud Platform products and services
**        - gcloud:  Main CLI for Google Cloud
          - gsutil: CLI for Cloud Storage 
          - bq (BigQuery): CLI for Big Query 
    NOTE: Can install Cloud SDK on other computers, laptop, etc. 
          Available as a docker image
       Cloud Shell:  CLI access to resources from browser
              - debian based VM w/ persistent 5 GB home directory   
              - Cloud SDK utilities always installed 

  - APIs / REST
      - Programmatic acess to products and services 
          - Typically use JSON as interchange format
          - Use OAuth 2.0 for auth / auth

      - Enabled through the GCP Console
        NOTE: GCP Console can turn on / off APIs 
          
      - Most APIs include daily quoats and rates (limits) 
            - Can be raised by request
          
      - API Explorer
            - which APIs are available and which versions

Control GCP resource with client libraries:
    - Cloud Client Libraries
        - Community owned libraries 
    - Google API  Client Libraries
        - Open source, generated
        - Languages: Java, Python, C#, C++, JavaScript, PHP, .Net, Go, Node.js, Ruby, Objective-C, Dart


## Cloud Marketplace (formerly Cloud Launcher)
  - Solution marketplace containing pre-packaged, ready-to-deploy solutions
        - offered by Google and 3rd Party Vendors

  - Mobile App
      - Start, stop and use SSH to connect to Compute Engine instances and see logs
      - Start, stop Cloud SQL instances
      - Administer apps deployed on App Engine
      - Up-to-date billing info for projects & alerts
      - Graphs w/ key metrics
      - Alerts & indicent mgmt

cloud.google.com/console-app


############################################## 
## Virtual Machines and Networks in the Cloud


## Virtual Private Cloud Networking

VPC:  secure, individual, private cloud-computing model hosted within public cloud

  - Each VPC network contained in a GCP Project
  - Connect resources to each other and internet 
      - segment networks
      - firewall rules
      - static routes

NOTE: VPC Networks have GLOBAL scope
      - subnets in any region
      - subnets can span zones that make up region

Size of subnet can be increased by expanding range of IP Address


┌──────────────────────────────────────────MyVPC───────────────────────────────────────────┐
│                                                                                          │
│    ┌─────────────────────────────────────us-east-1───────────────────────────────┐       │
│    │                                                                             │       │
│    │                  ┌────us-east-1b────┐        ┌────────us-east-1c──────┐     │       │
│    │   ┌────────────┐ │                  │        │                        │     │       │
│    │   │my-subnet-1 ├─┼──────────────────┼────────┼────────────────────────┤     │       │
│    │   └────────────┘ │                  │        │                        │     │       │
│    │ 10.0.0.0/24      │       [VM]       │        │          [VM]          │     │       │
│    │                  │                  │        │                        │     │       │
│    │                  └──────────────────┘        └────────────────────────┘     │       │
│    │                        10.0.0.2                         10.0.0.3            │       │
│    │                                                                             │       │
│    └─────────────────────────────────────────────────────────────────────────────┘       │
│                                                                                          │
└──────────────────────────────────────────────────────────────────────────────────────────┘

NOTE: - VPCs are Global 
      - subnets can span zones that make up a region 
      - can dynamically change range of IP address in subnet (does not effect provisioned VMs)


## Compute Engine

- Run VMs on GCP
- Create with:
  - GCP Console
  - gcloud CLI
- Run Linux / Windows Server
- Can create custom VM
- Pick GPU

Persistent storage:
  - Standard
  - SSD
     - Local SSD for scratch space (ephemeral storage)

- Define startup script & meta data
- snapshot of VM disks

Cloud Market Place:
  - pre-configured VMs with software, storage, etc. configured

Pricing :
- per second billing / 1 minute minimum
- sustained use discounts  / > 25% per month
- committed use discounts
- Preemptible instances & Spot VM
- High throughput to storate / no extra cost
- Custom machine types:
    - only pay for hardware needed


## Scaling
Scale Up / Out 
  - Autoscaling

Scale Up: 128 CPUs / 1024 GB
  - Max CPUs per VM tied to Family 
  - Constrained by user quota

cloud.google.com/compute/docs/machine-types

## VPC Compatabilities 

VPC have routing tables
  - built-in
  - forward traffic within network
      - across subnets
      - between GCP zones
      - no external IP address required

VPC provide global distributed firewall
  - firewall rules via metadata tags on compute engine instance
     i.e. traffic for 80 / 443 can route to compute engines tagged with "web"

VPC belongs to Project
  - VPC Peering allows traffic between two VPCs in different projects
  - Shared VPC: utilize IAM to control what is shared between VPCs




## Cloud Load Balancing
  - Fully distributed, software-defined, managed servcie
  - HTTP / HTTPS / TCP / SSL / UDP
  - single anycast IP fronts all backend instances
  - traffic goes over Google backbone
  - Cross region load balancing
  - Multi-region fail over
  - No "Pre-Warming"




Google VPC Load Balancing Options

Global            Global            Global TCP          Regional           Regional 
HTTP(S)           SSL Pooxy         Proxy                                   Internal
---------------   ----------------  -------------       ---------------     ----------------
Layer 7 load      Layer 4 load      Layer 4 load       Load balancing       Load balancing  
balancing based   balancing of      balancing of        of any traffic      of traffic 
on load           non-HTTPS SSL     non-SSL TCP         ( TCP, UDP)         inside a VPC
                  traffic based on  Traffic
                  load
---------------   ----------------  -------------       ---------------     ----------------
Can route           Supported on    Supported on        Supported on any    Use for the 
different URLS to   specific port   specific port       port number         inerntal tiers
different back      numbers         numbers                                 of multi-tier 
ends                                                                        applications



## Cloud DNS / CDN
Cloud DNS:  8.8.8.8
  - manage via Console, gloud CLI and RESTful API


Cloud CDN 
  - Global edge caches
  - CDN Interconnect: use another cloud provider CDN


## Connecting Networks  
Connection Options:

IPsec VPN :  multi-Gbps over VPN tunnels
    - uses Cloud Router 
    - exchange route info (VPC, other networks) using Border Gateway Protocol

Direct  Peering:  Private  connection between you and google 
    - puts router in same public datacenter as Google Point of Presence (PoP)
    - ** 100 Points of Presence around world

Carrier Peering:  connection thru largest partner netowrk
    - direct access from on-premise network thru service provider network
    - NOTE: Not covered by Google SLA

Dedicated Interconnect:  N x 10G Transport circuit
    - 1 or more direct, private connections to Google
    - Covered by up to 99.99% SLA
    - Can be backed by VPN

Partner Interconnect:  
    - From On-Prem to VPC via Service Provider
    - Data center in a location that can't be reached by Dedicated Interconnect 
    - Useful for < 10GB/sec conneciton
    - Can be covered by up to 99.99% SLA




####################################### 
## Storage in the Cloud

## Cloud Storage
  - binary large object storage + meta data
    - high performance 
    - simple admin / no capacity management
 - key is URL to storage
 - not a file system
      - online content
          - video, pictures, audio
      - backup  / archiving
      - store intermediate results
 - made of buckets
 - Objects are Immutable
    - new version for changes
    - Can turn on object versioning

 - Data encrypted at rest / encrypted in transit via HTTPS

  Buckets:
    - globally unique name
  - specify geographic area where stored


  - IAM Policies / Access Control Lists

        IAM:  Inherited from project to bucket to object ( project > bucket > object )
        ACL:  Scope + permissions


Lifecycle management policies 
  - i.e. delete objects older than 365 days
         3 most recent versions


## Cloud Storage Classes
 - Standard Storage: hot data:  99.95 / 99.90 SLA
 - Nearline Storage: infrequently accessed data (1x per month) / SLA 99.0
 - Coldline Storage: infrequently accessed data (1x per 90 days) / SLA 99.0
 - Archive Storage : infrequently accessed data (1x per year )

common characteristics:
  - unlimited storeage (no min obj size)
  - worldwide accessibility and locations
  - low latency / high durability
  - geo- redundancy
   - Data encrypted at rest on server / encrypted in transit via HTTPS



Data Ingress:
  Online Transfer:  
      -   CLI or drag/drop

  Storage Transfer Service: 
      -  scheduled managed batch service

  Transfer Appliance: 
      - rackable appliances to ship data
      - 1 PB of data

Data Services:

  Big Query: 
      - import / export tables

  App Engine: 
      - logs, backups, object storage 

  Cloud SQL : 
      - import / export tables

  Compute Engine: 
      - startup scripts, images, object storage


gsutil:  Google Storage CLI Utility


## Cloud SQL 
  - Fully managed RDBMS (DBaaS) 
      - MySQL 
      - PosgreSQL Beta 
      - SQL Server
  - Transactions
  - TBs of data
  - Provide replica services: read, failover, etc
  - managed backups (on demand, scheduled)
  - vertical   scaling (read / write)
  - horizontal scaling (read)

**  64 processor cores
** 400 GB RAM
**  30 TB Storage

- automatic replicatin
- managed backups, covers 7 backups
- encrypts data
- includes network firewall
- Accessible by other Google Cloud services


## Cloud Spanner 
  - horizontally scalable RDBMS 
  - strong global consistency 
  - managed services w/ HA
  - SQL queries
  - Automatic replication
  - DBs > 2 TB
  - PetaBytes capacity
  - High number of IOPS


## Fire Store 
  - horizontally scalable NoSQL DB 
   -  Documents and COllections
  - NoSQL queries
  - index by default
  - transaction support
  - atomic batch operations
  - strong consistency
  - automatic mult-region data replication
  - charged for CRUD operations and data amount
  - free daily quota **
    - 50k document reads
    - 20k document writes
    - 20k document deletes
    - 1 GB stored data


## Cloud Bigtable 
  - Fully managed NoSQL / scalable
  - wide-column database 
  - terabyte apps
  - sparsely populated columns
    - billions of rows 
    - thousands of columns
  - single lookup key / persistent hash table
  - low latency, high throughput: read and write
  - > 1TB semi-structured data
  - Data fast / high throughput / rapidly changing
  - data is timeseries
  - Machine Learning

Accessed vy HBase API
   - Natively compatible w/ big data / Hadoop ecosystems

Data encrypted in-flight / at rest
   -Control access via IAM

Bigtable powers:  Google Analytics, GMail, Search

Access Patterns:
  - API      :   HBase Client
  - Streaming:   via Cloud Dataflow Streaming, Spark Streaming, Storm
  - Batch    :   Read / write data via MapReduce, Dataflow, Spark 




gsutil:  Google Storage CLI Utility




                Firestore                   Bigtable              Cloud                 Cloud                 Cloud                   Big
                                                                  Storage               SQL                   Spanner                 Query

Type            NoSQL                     NoSQL               Blobstore             Relational            Relational              Relational
                Document                  Wide column                               SQL for OLTP          SQL for OLTP            SQL for OLTP

Transactions     Yes                     Single-row            No                      Yes                  Yes                   No 

Complex Queries  No                       No                   No                      Yes                  Yes                   Yes 

Capacity         TB+                      PB+                  PB+                     30 TB                PB                    PB+ 

Unit size       1 MB/entity         10MB/Cell, 100MB/row       5TB/Object        Determined by engine       10,240MB/row         10 MB/row

Best For    semi-strcutred          flat data, heavy r/w      binary, object      web frameworks          large scale db (>2TB)   interacitve querying
            durable key-value         analytical data

Use Cases    App Engine Apps        AdTech, IoT data        Images, media         user creds              high I/O                data warehousing 
                                      Financial               backups             customer orders         global consistency      




NOTE: env variable $DEVSHELL_PROJECT_ID contains unique project id.


ex. gsutil ls gs://$DEVSHELL_PROJECT_ID


####################################### 
## Containers in the Cloud

 - Independent workload scalability
 - OS and hardware abstraction layer

OS is virtualized 
 - code and dependencies in a container
 - limited access to own file system / hardware
 - scales like PaaS but flexible like IaaS

## Kubernetes 
 - GKE (Google Kubernetes Engine) -> Kubernetes
 - platform for managing containerized workloads / services
 - scale up / down/ rollout / rollback 
 - APIs to deploy containers to set of nodes (called a cluster)
 - Components run control plane and nodes run containers

 - pod: smallest unit in kubernetes to create / deploy
   - represents a running process

Usually one container per pod
  - multiple containers can share a pod to share resources, etc.

NOTE: use kubectl to interact with kubernetes
Deployment can run part a component of an application or an entire application 

list of running pods
> kubectl get pods

this is a deployed local Load Balancer
> kubectl expose deployments nginx -- port=80 --type=LoadBalancer

Services is an abstraction, defines logical set of pods and abstraction
> kubectl get services


Services is an abstraction, defines logical set of pods and abstraction
  - increase pods when CPU utilization has increased
> kubectl scale

Update new version of app
> kubectl rollout


## Google Kubernetes Engine (GKE)
- managed kubernetes in cloud
  Compute Engine instances into a Cluster

 - Created by console or g-cloud command
 - deploy / manage applications 
 - perform admin tasks
 - setup Policies
 - Monitor workload

# Advanced cluster management features
 - load balancing for Compute Engine instances
 - Node pools to designate subsets of nodes within cluster
 - Auto scaling / upgrades
 - Auto reapir
 - Logging Monitoring


> gcloud container clusters create k1


## Hybrid and multi-cloud

 - move parts of processing to cloud while keeping rest on premise


## Anthos

 - hybrid and multi-cloud solution
 - framework rests on kubernetes and GKE on-prem
 - tools for monitoring and maintaining
    - on prem, in cloud, multi-cloud

 - GKE on-prem
    - turnkey, production grade version of Kubernetes
    - service mesgh (Anthos, Istio)
    - single pane of glass dashboard for entire environment




┌─────────────────────────────────────────────────────────────────┐                         ┌───────────────────────────────────────────────────────────────┐
│                                                                 │                         │                                                               │
│ Google Cloud                                                    │                         │  On-Premise Data Center                                       │
│                                                                 │                         │                                                               │
│      ┌────────────────────┐                                     │                         │                                                               │
│      │ GKE Dashboard      │                                     │                         │                                   ┌────────────────────┐      │
│      │ Centralized UI     │                                     │                         │                                   │                    │      │
│      │                    │                                     │                         │                                   │  Policy Repository │      │
│      └────────────────────┘                                     │           ┌─────────────┼──────────────────────────────────►│  Store Policy      │      │
│                                                                 │           │             │                                   │   (git)            │      │
│                                                                 │           │             │                                   └─────────────────┬──┘      │
│                ┌────────────────────────────────────────────────┼───────────|             │                                                     │         │
│                │                                                │           │             │                                                     │         │
│   ┌────────────┼─────────────────────────────────────────────┐  │           │             │    ┌────────────────────────────────────────────────┼───────┐ │
│   │            │                                             │  │           │             │    │                                                │       │ │
│   │  ┌─────────▼──────────┐       ┌──────────────────────┐   │  │   ┌───────┴────────┐    │    │    ┌──────────────────────┐    ┌───────────────▼────┐  │ │
│   │  │ Anthos Config      │       │                      │   │  │   │ Cloud          │    │    │    │                      │    │ Anthos Config      │  │ │
│   │  │ Management         │       │ Anthos Service Mesh  ◄───┼──┼───┤ Interconnect   ├────┼────┼────► Istio Service Mesh   │    │ Management         │  │ │
│   │  │ Sync Policy        │       │                      │   │  │   │                │    │    │    │    Open Source       │    │ Sync Policy        │  │ │
│   │  │                    │       └──────────────────────┘   │  │   └────────────────┘    │    │    └──────────────────────┘    │                    │  │ │
│   │  └────────────────────┘                                  │  │                         │    │                                └─────────┬──────────┘  │ │
│   │                                                          │  │                         │    │                                          │             │ │
│   │    ┌────────────────────────────────────────────┐        │  │                         │    │       ┌──────────────────────────────────▼───────┐     │ │
│   │    │                                            │        │  │    ┌────────────────┐   │    │       │                                          │     │ │
│   │    │     Google Kubernetes Engine               │        │  │    │ Cloud          │   │    │       │    GKE On-Premises                       │     │ │
│   │    │                                            │◄───────┼──┼────┤ Marketplace    ├───┼────┼──────►│                                          │     │ │
│   │    │                                            │        │  │    │ 3rd Party Int  │   │    │       │                                          │     │ │
│   │    └────────────────────┬───────────────────────┘        │  │    └────────────────┘   │    │       └──────────────────────────────────────────┘     │ │
│   │                         │                                │  │                         │    │                                                        │ │
│   └─────────────────────────┼────────────────────────────────┘  │                         │    └────────────────────────────────────────────────────────┘ │
│                             │                                   │                         │                                                               │
└─────────────────────────────┼───────────────────────────────────┘                         └─────────────────────────────────┼─────────────────────────────┘
                              │                                                                                               │
                              │                                                                                               │
                              │                                   ┌───────────────────────────┐                               │
                              │                                   │    Operations             │                               │
                              └──────────────────────────────────►│  Logging & Monitoring     │ ◄─────────────────────────────┘
                                                                  └───────────────────────────┘


cloud.google.com/anthos


####################################### 
## Applications in the Cloud


## App Engine
 - Fully managed, serverless platform for developing / hosting web applications at scale
  app engine -> [languages, libraries, frameworks] -> servers (no servers to provision)

 Eclipse, IntelliJ, Maven Git, Jenkins, PyCharm

Built-in Services & APIs  
  - NoSQL datastore     - Health Checks
  - Memcache            - Applicaton Logging
  - Load balancing      - User Auth API 

SDK: 
  - APIs and libraries
  - Sandbox environment
  - Deployment tools
        - SDK manages app locally, Google Cloud Console manages in production

Cloud Console:
   - Create new apps
   - Configure domain names
   - Change which verson is live
   - Review access and error logs
   - Security Command Center scans for vulnerabilities


## App Engine Environments
 Standard vs. Flexible

  - Standard:
      - container instances running on Google infrastructure 
      - pre-configured runtime with standardized list of languages 
        - Persistent storage w/ queries, sorting, transactions
        - Automatic scaling and load balancing
        - Asynchronous task queues for performing work outside of scope of request
        - Scheduled tasks for triggering events at specific times / intervals
        - Integration with Google Cloud Services and APIs
    Requirements:
      - Use specificed versions of Java, Python, PHP, Go, Node.js and Ruby
      - Apps must conform to sandbox constraints, dependent on runtime


  - Flexible:
      -  Docker containers on Compute Engine VMs
      -  App Engine runs Compute Engines
         - instances health-checked, healed, co-located 
         - Critical, backward-compatible updates are automatically applied to underlying OS
         - VM instances are automatically located by geographic region according to project settings
         - VM instances are restarted on weekly basis

      -  Supports
          - Microservices                       - Search
          - Authorization                       - Versioning
          - SQL & NoSQL databases               - Security Scanning
          - Traffic splitting                   - Memcache
          - Logging                             - Contend Delivery Networks

      -  Customize runtime and OS:  Python, Java, Go, Node.js, PHP, .Net and Ruby
      -  Provide custom Docker Image / Docker FIle


                                    Standard Env                          Flexible Env
                                    -------------                         ------------
Instance startup                    Seconds                                 Minutes
SSH access                          No                                      Yes (not default)
Write to local disk                 No (some read/write to /tmp)            Yes, ephemeral (disk initialized on VM startup)
Support for 3rd-party binaries      Certain languages                       Yes
Network access                      via App Engine services                 Yes
Pricing Models                      After free tier, pay per instances      Pay for resource allocation per hour, no auto shutdown
                                    class w/ auto shutdown



App Engine vs. GKE ??

App Engine: give environment max control on deployment and scaling
GKE : give app owner full flex of kubernetes

App Engine Standard   <-> App Engine Flexible  <-> GKE

## Google Cloud API Management

  Cloud Endpoints  <-->  API  <--> Apigee Edge
   - management tools for Google's API

  Cloud Endpoints: 
    - Distributed API management system 
    - Provide API console, hosting logging, monitoring and other features
    - Use with any APIs that support the OpenApi Spec
    - Supports apps running in App Engine, GKE, Compute Engine
    - Clients:  Android, iOS, Javascript


  Apigee Edge: 
    - specific focus on business problems, like rate limiting, quotas and analytics
    - backend services for Apigee Edge don't need to be in Google Cloud

## Cloud Run  (think Lambda)
 - Managed compute platform that can run stateless containers 
      via web requests / pub-sub events
 - Serverless
 - Built on Knative, an open API and runtime environment built on Kubernetes
      Note: Knative let's you run on Cloud Run or GKE
 - Automatically scale up and down from zero almost instantaneously
      - charges only for resources used, nearest 100ms

  container-based workflow:
    1. write code
          - app should start server that listens for web requests
    2. build and package container image
    3. Push image to Artifact Registry
            https: URL returned back

  NOTE: Cloud Run then starts your container on demand to handle requests.
        All incoming requests are handled by dynamically adding and removing containers.


  source-based workflow:
    1. write and deploy code
    2. Buildpacks builds and packages to container 


Application is exposted on a sub-domain of ***.run.app domain or use own custom domain

Cloud Run handles:
  - creating SSL certificate
  - configuring SSL termination w/ secure settings
  - handling incoming requests, decrypting and handing off to app

       https://***.run.app     +-----------------------------------------------------+
       https://your.domain     |                 Cloud Run                           | 
client  -------HTTPS----->     |  [Cloud Run Proxy]  ---HTTP--->  [ App Container]   | 
                               |                                                     | 
                               +-----------------------------------------------------+

Charged only when handling web requests within 100ms, start up and shutdown
  NOTE:  small fee for every 1MM requests served


- Charges increase w/ CPU and Memory
- Cloud Run can allocate 4 vCPU and 8GB memory

Cloud Run can run any binary that is Linux 64 bit
  - Java        - PHP
  - Python      - Go
  - Node.js     - C++
  - COBOL       - Haskell
  - Perl       


## Developing and Deploying in the Cloud
## 

# Cloud Source Repositories 
 - full featured git repos hosted on cloud
    - App Engine, Compute Engine
 - can have unlimited number of private git repos
 - Diagnostic Tools:  Debugger, Error Reporting can run against git repos
 - can source from GitHub, BitBucket


# Cloud Functions
 - Lightwight, event-based, asynchronous compute solutions
 - create small, simple purpose functions that respond to cloud events 
   without the need to manage a server or a runtime environment
 - construct application workflows 
 - extend cloud services
 - billed to nearest 100ms, only when code is running
 - Written in:
  - Javascript (Node.js)
  - Python
  - Go
 - Executed in a managed Node.js env on Google Cloud
 - Asynchronous:  Events from Cloud Storage and Pub/Sub
 - Synchronous :  HTTP Invocation for synchronous execution

# Deployment: Infrastructure as Code
# Terraform
  - Create template using HashiCorp Config Language (HCL)
  - Terraform uses template to determine actions to create environment
  - Use Terraform to update env to match change in code
  - Store / version control templates in Cloud Source Repositories


## Logging and Monitoring in the Cloud
## 

Four Golden Signals (measuring performance/reliability)
 1. Latency
 2. Traffic
 3. Saturation
 4. Errors


# Latency: how long to return result
 - page load latency              - number of requests waiting for thread
 - query duration                 - service response time
 - transaction duration           - time for first response
 - time to complete data return


# Traffic:  how many requests reaching system 
 - http requests / sec            - requests for static vs. dynamic content
 - Network I/O                    - # concurrent sessions
 - # transactions per second      - # of retrievals per second
 - # of active requests           - # of write ops
 - # of read ops                  - # of active connections


# Saturation:  How close to capacity a system is
 - % memory utilization           - % thread pool utilization
 - % cache utilization            - % disk utilization
 - % CPU utilization              - disk quota
 - memory quota                   - # of available connections
 - # of users on the system 

# Errors:  System failure events
 - 400/500 HTTP codes             - Wrong answers / incorrect content  
 - # failed requests              - # exceptions
 - # stack traces                 - Servers that fail liveness checks
 - # of dropped connections

# SLI, SLO, SLA

Service Level Indicator:  selected monitoring metrics that measures one aspect of service reliability
              ratio of 2 numbers:  # of Good Events / Count all Valid Events

Service Level Objective:  combines SLI with target reliability  (generally short of 100%)
              ex.  99.9%
              S - Specific 
              M - Measured
              A - Achievable
              R - Relevant
              T - Time bound

Service Level Agreement:  commitments made to customers that your systems and apps will have only a certain amount of down time.
      - minimum level of service promised
      - what happens when promise is broken

# Integrated Observability Tools


- Dashboards
- Metrics Explorer
- Logs Explorer
- Service Monitoring 
- Health Checks
- Debugger
- Profiler

## Monitoring Tools

> 1000 streams of metrics data

# Cloud Monitoring: overall health of apps 
collects: metrics, events, metadata, logs, services, systems, agents, custom code, and 
          various common app components:
              - Cassandra, Nginx, Apache, Elasticsearch, others

## Logging Tool

# Cloud Logging: 
  - collect     - store
  - search      - analyze
  - monitor     - alert

Log Analysis:
 - Logs Explorer 
 - BigQuery allows querying of log data
 - Archived logs to Cloud Storage

Log Export:
 - exported to Cloud Storage
 - exported as messages to Pub/Sub
 - exported into BigQuery tables
 - exported into BigQuery tables

Log Retention:
  - dependent on type
  - Data access logs, default = 30 days, max of 3650 days
  - Admin logs stored default = 400
  - exported to cloud storage or big query to exend retention 

Log Types:
  - Cloud Audit Logs
      - who, what where
      - admin activity
      - dat access 
      - system events
      - transparency

  - Agent Logs
      - fluentd agent

  - Network Logs
      - VPC flow
      - firewall rules
      - NAT gateway

  - Service Logs
      - Standard out / err


## Error Reporting / Debugging
# Error Reporting 
  -  counts, analyzes, aggregates crashes in running cloud services
  -  interface w/ sorting / filtering capabilities
  -  dedicated view: time chart, occurances, first / last seen, etc.

# Debugging
  -  Debug while running in prod
  -  collaborate debug session w/ Console URL
  -  snapshot: production state captured at specific line
  -  integrates into existing dev workflows
  -  integrates w/:  Cloud Source Repo, GitHub, Bitbucket,  GitLab

# Cloud Trace
  -  collects latency data from distributed apps in Google Cloud Console
        - App Engine, Compute Engine VMs, Kubernetes Engine containers
  -  generate latency reports

# Cloud Profiler
  -  CPU and heap picture of app
  -  analyze anywhere: Google Cloud, other clouds, on-prem
        -  supports Java, Go, Python, Node.js
  -  resource consumption via flame graph


## Summary / review
## 

cloud.google.com/training
cloud.google.com/certifications




##########################################################################
## Essential Cloud Infrastructure: Foundation 
##########################################################################

############################################
## Introducing Google Cloud 

## GCP: 
 - infrastructure
 - platform
 - software


<--------------------------   Google Cloud Products and Services  -------------------------->   
Iaas                                     PaaS                                            SaaS

CPUs, Memory                 Servers                         Clusters              Serverless
Disks, Interfaces           VM Instances                Cluster Management        Autoscaling

IT Ops                  Sys Ops              Dev Ops               Low Ops             No Ops




## Compute Services

- Compute Engine : IaaS
- Google Kubernetes Engine (GKE) :  Google managed container environment
- App Engine     :  Fully Managed PaaS.  Run apps w/ infrastructure managed by Google
- Cloud Functions:  Functions as a Services.  Serverless execution env.
- Cloud Run      :  Stateless containers via web request or Pub / Sub events (Serverless, KNative)
                        can run on google cloud or GKE, resources calculated to 100ms




############################################
## Interacting with Google Cloud

## Module Overview

# Interacting w/ GCP
  - Google Cloud Platform Console (Web UI):  console.cloud.google.com
  - Cloud Shell and Cloud SDK (CLI)       : ex.  > gcloud compute instances list
                  cloud shell:  browser based shell, temporary VM + 5 GB persistent disk + Cloud SDK
  - REST-base API (custom apps)
  - Cloud Mobile App (iOS / Android)
          - manage vms, db instances, App Engine apps, billing, etc.

# Client libraries / API Interfaces

 - Google Cloud SDK:  gcloud, gsutil, bq
 - RESTful API:  get, post, put, delete   <-->  JSON
 - Google Cloud Client Libraries:   Java, Python, Node.js, Ruby, Go, PHP

Cloud Shell: 
  - gcloud : Compute Engine + Google Cloud Services
  - gsutil : Cloud Storage
  - kubectl: GKE + Kubernetes
  - bq     : Big Query



## list gcloud regions
gcloud compute regions list

## Projects

> New Project > Name > [reate]

- projects can be "shutdown"
    - stopping services and billing
    - deletion gets scheduled to happen in the future to allow "undo" 
    
switching project contexts in cloud shell

> gcloud config list          # List current project
> gcloud config set project   # Set project context 


############################################
## Virtual Networks

## Virtual Private Cloud (VPC)
  - Software Defined Network

VPC Objects:
- Projects                  - IP Addresses
- Networks                      - Internal, External, range
    - Default, auto mode    - Virtual Machines (VMs)
      custom mode
- Subnetworks               - Routes
- Regoins                   - Firewall rules
- Zones

# Projects  
 - Associates objects and services w/ billing
 - Contains networks (up to 5) that can be shared / peered

# Network
 - No IP address range
 - Global and spans all regions
 - contains subnetworks
 - available as: default, auto, custom


# VPC Network Types
default:
  - every project 
  - one subnet per region 
  - default firewall rules

auto mode:
  - default network 
  - one subnet per region 
  - Regional IP allocation
  - Fixed /20 subnetwork per region
  - Expandable to /16

custom mode:
  - no default subnets created 
  - Full control of IP ranges
  - Regional IP allocation
  - Expandable to IP ranges you specify


10.128.0.0/9 CIDR


                              +-------------------------------------------->[Internet]
Networks isolate systems      |                              + ------------------^
Project                       |                              |
Network #1      Network #2    |  Network #3      Network #4  |  Network #5      Regions
  [A]                         +->  [C]              [D]   <--+                 us_east1
   |                                                                           us-central1
   |                                                                           us-west
  [B]                                                                          europe-west1
                                                                               asia-east1

A and B can communicate though internal IPs
C and D can communicate though external IPs

 - VPC is global

┌──────────────────────┐             ┌────────────────────────────────────────────────────────────────────────────────────────────┐
│     On Premises      │             │                                                                                            │
│                      │             │                                                                     Cloud VPC Network      │
│                      │────────────────────────────> ┌────────────────┐                                                          │
│                      │             │                │  VPN           ├────────────────────────────────┐                         │
└──────────────────────┘             │                │  Gateway       │                                │                         │
                                     │       ┌────────┴──────┬─────────┴───────┐       ┌────────────────┼────────────────┐        │
                                     │       │               │                 │       │                │                │        │
                                     │       │               │                 │       │                │                │        │
                                     │       │      ┌────────▼─────────┐       │       │      ┌─────────▼────────┐       │        │
                                     │       │      │                  │       │       │      │                  │       │        │
                                     │       │      │   VM             │       │       │      │  VM              │       │        │
                                     │       │      │   Compute Engine │       │       │      │  Compute Engine  │       │        │
                                     │       │      │                  │       │       │      │                  │       │        │
                                     │       │      └──────────────────┘       │       │      └──────────────────┘       │        │
                                     │       │                                 │       │                                 │        │
                                     │       │         Subnet                  │       │         Subnet                  │        │
                                     │       │         10.10.0.0/26            │       │         10.50.0.0/26            │        │
                                     │       │         us-west1                │       │         us-east1                │        │
                                     │       │                                 │       │                                 │        │
                                     │       └─────────────────────────────────┘       └─────────────────────────────────┘        │
                                     │                                                                                            │
                                     └────────────────────────────────────────────────────────────────────────────────────────────┘

NOTE: On Prem can connect to different regions via VPN Gateway 



Subnetworks can cross zones within a region


┌───────────────────────────────────────Network 1─────────────────────────────────────┐
│                                                                                     │
│     ┌─────────────────────────────────Region 1───────────────────────────────┐      │
│     │                                                                        │      │
│     │                       ┌──────────────┐       ┌──────────────┐          │      │
│     │   ┌─────────┐         │    Zone A    │       │    Zone B    │          │      │
│     │   │subnet-1 │ ───▲────┼───────|──────────────┼───────┼─────────────────┼─     |
│     │   └────▲────┘    │    │     +───+    │       │    +────+    │          │      │
│     │        │         │    │     │VM │◄───┼───┐   │    │ VM │◄───┼─────┐    │      │
│     │        │         │    │     +───+    │   │   │    +────+    │     │    │      │
│     │        │         │    └──────────────┘   │   └──────────────┘     │    │      │
│     │        │         │                       │                        │    │      │
│     └────────┼─────────┼───────────────────────┼────────────────────────┼────┘      │
│              │         │                       │                        │           │
│              │         │                       │                        │           │
└──────────────┼─────────┼───────────────────────┼────────────────────────┼───────────┘
               │         │                       │                        │
               │         │                       │                        │
         10.0.0.0      10.0.0.1             10.0.0.2                 10.0.0.3
         Reserved     Reserved
        for Network   for Gateway

NOTE: VMs can be on same subnet but in differt Zones
 - single firewall rule can apply to both vms
 - .0 reserved for Network and .1 reserved for Gateway
 - reserved: second to last and last address (Broadcast Address)
 - EVERY subnet has 4 reserved IP Addresses in range


# Can expand subnets without re-creating 
 - increase network range of CIDR
    - can't overlab other subnets
    - IP range must be unique valid CIDR block
    - New subnet IP ranges have to fall within valid (Regional) IP ranges
    - can expand but NOT SHRINK
    - Auto Mode can expand from /20 to /16
    - Avoid large subnets


NOTE: To increase subnet size, make mask a LOWER NUMBER, 
  this increases the number of addresses in subnet

i.e.  change 10.0.0.0/29 to  10.0.0.0/26

## IP Addresses

- VM can have two IP addresses (internal external)
  Internal IP                               External IP
  -----------------------------------------------------------
- allocated from subnet range       - Assigned from pool
  to VMs by DHCP                      (ephemeral)
- DHCP lease renewed every 24 hrs   - Reserved (static) 
- VM name + IP is registered        - Bring Your Own IP address (BYOIP)
  with network-scoped DNS           - VM doesn't know external IP; it is mapped
                                      to the internal IP


** Limit of instances (IP Accr) per network 15K

NOTE: External IP Address is unknown to VM.


 - FQDN ==  [hostname].[zone].c.[project-id].internal
 - DHCP always points FQDN to internal IP
 - Name resolution handled by internal DNS resolver
      - each instance has meta data server which acts as DNS resolver
      - handles all DNS queries for local network resources
      - routes other resources to Google Pulic DNS Servicers
      - instances stores lookup table which matches External IP to Internal IP

 - DNS zones can be hosted using Cloud DNS
      - Google's DNS Services
      - Low Latency
      - high Availability
      - UI, command line, API

 - Alias IP Address
      - assign range of IP addresses as aliases to VM


                │
      VM        │
  Primary IP    │
    10.1.0.2    │
                │
┌───────────────v──────────────────┐
│               +------------+     │             ┌───────────────────────────────────────────┐
│              VM            |     │             │  Subnet:                                  │
│  ┌────────────────┐        +---->├─────────────┤  Primary   CIDR range 10.1.0.0/16         │
│  │   Containers   │              │             │                                           │
│  │  ┌─────────────┼──┐-----------├─────────────┤  Secondary CIDR range 10.2.0.0/20         │
│  └──┼─────────────┘  │           │             └───────────────────────────────────────────┘
│     │   ┌────────────┼───┐       │
│     └───┼────────────┘   │       │
│         │                │       │
│         └────────────────┘       │
│  VM alias IP Range: 10.2.1.0/24  │
│                                  │             
└──────────────────────────────────┘


# IP Address / Default Domains

- Google publishes the complete list of IP ranges that it announces to the internet in goog.json.
- Google also publishes a list of Google Cloud customer-usable global and regional external IP
    addresses ranges in cloud.json.

https://www.gstatic.com/ipranges/cloud.json:  provides a JSON representation of Cloud
    IP addresses organized by region.

https://www.gstatic.com/ipranges/cloud_geofeed: standard geofeed formatted IP
     geolocation file that we share with 3rd-party IP geo providers like Maxmind, Neustar,
     and IP2Location.

https://www.gstatic.com/ipranges/goog.json and https://www.gstatic.com/ipranges/goog.txt are TXT and JSON formatted files
    respectively that include Google public prefixes in CIDR notation.
NOTE: For more information as well as an example of how to use this information, refer to

https://cloud.google.com/vpc/docs/configure-private-google-access#ip-addr-defaults



## Routes and Firewall Rules

# Routes
- Every network has routes that let instances in a network send traffic to each other
- default route that directs packets to destinations outside the network  (gateway ??)
    - firewall rules must allow the packet

- routes map traffic to destination networks
- routes created when: 
    - network created
    - subnet  created
    - allows VMS on same netowrk to communicate

- Applies to traffic egressing  a VM
- Forward traffic to most specific route
- Destination is in CIDR Notation

NOTE: Traffic is delivered ONLY if it also matches a firewall rule

[VM Routing Table]
192.168.5.0/24
10.146.0.0/20
10.128.1.0/20
0.0.0.0/0


# Firewalls

- Firewall rules protect VM instances from unapproved connections
- VPC network functions as a distributed firewall
- Connections are allowed / denied at instance level
- ** Firewall rules are stateful
- Impled deny all ingress / allow all egress


Routes map traffic to destination networks
Parameter           Details
----------          -----------
direction           Inbound  connections are matched against ingress rules only
                    Outbound connections are matched against egress  rules only

source or           For the ingress direction, sources can be specified as part of the rule with IP addresses, 
destination         source tags or source service account

protocol and        Any rule can be restricted to apply to specific protocols only or specific cominations 
port                of protocols and ports only

action              To allow or deny packets that match the direction, protocol, port and source or destination of the rule 

priority            Governs the order in which rules are evaluated; the first matching rule is applied

Rule                All rules are assigned to all instances, but you can assign certain rules to certain instances only
Assignment



## Pricing
# Network Pricing
Traffic Type                                                Price
-------------                                               ------
Ingress                                                     No Charge  (unless a service is processing like Load Balancer)
Egress to the same zone (Internal IP Addr)                  No Charge  
Egress to Google products (YouTube, Maps, Drive)            No Charge  
Egress to a different GCP service                           No Charge  
   (within same region; exception)
Egress between zones in the same region (per GB)            $0.01
Egress to the same zone (via external IP Addr, per GB)      $0.01
Egress between regions within the US and Canada (per GB)    $0.01
Egress between regions, not including between US Regions    Varies by Region

# External IP address pricing (us-central1) 

Traffic Type                                                Price / Hour (USD)
-------------                                               -------------------
Static IP address (assigned but not used)                     $0.010
Static and ephemeral IP address in us on std VMs              $0.004
Static and ephemeral IP address in us on premptible VMs       $0.002
Static and ephemeral IP address attached to forwarding rules  No charge


GCP Pricing Calculator:  proviced estimated costs of service + traffic


Networks LAB: 
Note: The External IP addresses for both VM instances are ephemeral. If an instance is stopped, any ephemeral 
external IP addresses assigned to the instance are released back into the general Compute Engine pool and 
become available for use by other projects.

When a stopped instance is started again, a new ephemeral external IP address is assigned to the instance. 
Alternatively, you can reserve a static external IP address, which assigns the address to your project indefinitely 
until you explicitly release it. 


# create network and subnetwork via gcloud cli:

gcloud compute networks create managementnet --project=qwiklabs-gcp-03-ccd4b4168b56 \
  --subnet-mode=custom --mtu=1460 --bgp-routing-mode=regional


gcloud compute networks subnets create managementsubnet-us --project=qwiklabs-gcp-03-ccd4b4168b56 \
  --range=10.130.0.0/20 --stack-type=IPV4_ONLY --network=managementnet --region=us-central1

# firewall rules

gcloud compute --project=qwiklabs-gcp-03-ccd4b4168b56 firewall-rules create managementnet-allow-icmp-ssh-rdp \
  --direction=INGRESS --priority=1000 --network=managementnet --action=ALLOW --rules=tcp:22,tcp:3389,icmp --source-ranges=0.0.0.0/0


# gcloud instance 
gcloud compute instances create managementnet-us-vm --project=qwiklabs-gcp-03-ccd4b4168b56 --zone=us-central1-c \
  --machine-type=f1-micro --network-interface=network-tier=PREMIUM,subnet=managementsubnet-us --metadata=enable-oslogin=true \ 
  --maintenance-policy=MIGRATE --provisioning-model=STANDARD --service-account=995597317061-compute@developer.gserviceaccount.com \
  --scopes=https://www.googleapis.com/auth/devstorage.read_only,\
    https://www.googleapis.com/auth/logging.write,\
    https://www.googleapis.com/auth/monitoring.write,\
    https://www.googleapis.com/auth/servicecontrol,\
    https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append \
    --create-disk=auto-delete=yes,boot=yes,device-name=managementnet-us-vm,image=projects/debian-cloud/global/images/debian-11-bullseye-v20220920,\
    mode=rw,size=10,type=projects/qwiklabs-gcp-03-ccd4b4168b56/zones/us-central1-c/diskTypes/pd-balanced --no-shielded-secure-boot \
    --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any




## Common network designs
 - increase availability w/ multiple zones
    - 1 network -> 1 region -> 2 zones 

 - globalization: multiple regions
    - 1 network -> 2 region ->s 1 zone 

 - Cloud NAT provides internet access to private instaces


┌────────────────────────────────────────────────────────────────┐
│                                                                │
│     ┌─────────────────────────┐                                │
│     │      App Instances      │          ┌───────────┐         │
│     │    10.20.0.0/16         │          │           │         │
│     │                         │          │           │         │
│     └──────────────┬──────────┘          │           ├─────────┼────────────>  Update Server
│                    │                     │   Cloud   │         │                       
│                    │                     │   Nat     │         │
│                   ┌┴─────────────────────►           │         │
│                   │                      │           ├X────────┼───────────── Unauthorized
│     ┌─────────────┴───────────┐          │           │         │
│     │                         │          └───────────┘         │
│     │      App Instances      │                                │
│     │      10.21.0.0/16       │                                │
│     └─────────────────────────┘                                │
│                                                                │
└────────────────────────────────────────────────────────────────┘        public
                        private


- Private Google Access 
  - Access public ip address for Google APIs and Services for priv-only VMs 
  - enable on a subnet basis





NOTE: In order to connect to your private instance using SSH, you need to open an appropriate port on the firewall. 
IAP connections come from a specific set of IP addresses (35.235.240.0/20). 
Therefore, you can limit the rule to this CIDR range.

IAP = Identity-Aware Proxy: TCP forwarding
   - allows encrypted tunnel to forward SSH, RDP, etc. to VM instances

IAP Range: 35.235.240.0/20


NOTE: VM instances that have no external IP addresses can use Private Google Access to reach external IP addresses of Google APIs and services.


NOTE: Private Google Access is enabled at the subnet level. When it is enabled, instances in the subnet that only have private IP addresses 
  can send traffic to Google APIs and services through the default route (0.0.0.0/0) with a next hop to the default internet gateway.


# Cloud NAT is a regional resource. 
  - You can configure it to allow traffic from all ranges of all subnets in a region
  - from specific subnets in the region only
  - or from specific primary and secondary CIDR ranges only.
  - implements outbound NAT, but not inbound NAT.  
      - hosts outside of your VPC network can only respond to connections initiated by your instances




############################################
## Virtual Machines

## Compute Engine
  - any language
  - IaaS
  - Server autoscaling
  - general workloads

Predefined / custom machine types:
  - vCPUs (cores) and Memory (RAM)
  - Storage:
    - zonal or regional persistent disk (HDD / SSD)
    - local SSD
    - Cloud Storage
  - Networking
  - Linux / Windows

# Compute and Network throughput 
NOTE:  Network throughput scales 2Gbps per vCPU 
    - exception 2 or 4 vCPU can get upto 10 Gbps
    - max 32 Gbps w/ 16 vCPU or 
      100 Gbps w/ T4 or V100 GPUs 
      vCPU == 1 hardware hyperthread

# Storage
 - Standard, SSD, Local SSD

NOTE: Resize disks or migrate instances w/ no downtime
 - local SSD usually used for swap 
 - 8 x 375 GB local partitions  3 TB local SSD for each instance

Standard and non-local SSD = 257 TB per instance
performance scales w/ each GB allocated


# Networking
 - Default, custom
 - inbound / outbound firewall rules
    - IP based
    - Instance / group tags
 - Regional HTTPS load balancing
 - Network load balancing
    - No pre-warming
 - Global and multi-regional subnetworks




## VM Access

- creator of VM has full root access to instances 

Linux: SSH                
- ssh from cloud console or cloudshell via Cloud SDK 
- ssh from computer or 3rd party client and generate key pair
- requires firewall rule allow tcp:22


Windows: RDP
- RDP clients
- Powershell terminal
- requires setting the windows password
- requires firewall rule allow tcp:3389


# VM Lifecycle
      +----------------------------------------  Restart  <-----------------------------------------------------------------------+
      |                        +---------------- Reset <----+                                                                     |
      v                        v                            |                                                                     |
[Provisioning] --------->   [Staging]      --------->  [Running]       ----------------------->  [ Stopping]                      | 
      |                          |                           |                                        |                           |
      v                          v                           v                                        v                           |             
   vCPUS                    IP Addresses                Startup                                    Shutdown                       |
   Memory                (internal / external)          Script   --------> set/get                  Script                        |
      |                          |                          |              metadata                   |                           |
      v                          v                          v                                         v                           |
 root disk /                   System                     Access      +-->   export               [Terminated]                    |
 persisten disk                Image                    SSH / RDP     |    system image                |                          |
      |                          |                          |         |                        +------------------+               |
      v                          v                          v         |--> snaphost disk       |                  |               |
  additional disks              Boot                +--  Modify Use <-+                     [Delete]     [Availability Policy] ---+
                                                    +-> live migrate -+--> Move VM to 
                                                                          different zone


NOTE: Reset wipes memory of VM and resets it to initial state 

#  Changing VM state from running

                        Methods                       Shutdown Script Time          State
reset         console, gcloud, API, OS                  no                      remains running
restart       console, gcloud, API                      no                      terminated -> running
reboot        OS: sudo reboot                           ~90 sec                 running -> running
stop          console, gcloud, API                      ~90 sec                 running -> terminated
shutdown      OS: sudo shutdown                         ~90 sec                 running -> terminated
delete        console, gcloud, API                      ~90 sec                 running -> N/A
preemption    automatic                                 ~90 sec                 N/A




NOTE: Shutdown script will take ~90 seconds


# Availability policy: Automatic Changes 
 - "scheduling options" in SDK / API

 Automatic restart: 
   - Automatic VM restart due to crash / maintenance event
      - Not preemption or user-initiated terminate 
 
 On host maintenance: 
   - Determines whether host is live-mgrated or terminated due to maintenance event
      - Live migration is the default
 
 Live migration: 
   - During maintenance event, VM is migrated to different hardware without interruption
   - Metadata indicates occurence of live migration



# OS Patch management:
  - Patch compliance reporting 
  - Patch deployment


# Patch management tasks:
  - Create patch approvals
  - Setup flexible scheduling
  - Apply advanced patch config settings
  - Manage patch jobs / updates from central location

# Stopped / Terminated VMs:
  Charges stopped for:
    - memory
    - cpu resources
  Charges CONTINUE for:
    - attached disks
    - reserved IP addresses

# Actions supported on terminated VM:
 - change machine type
 - migrate instance to another network
 - add / remove attached disks; change auto-delete settings
 - modify instance tags
 - modify custom VM or project-wide metadata
 - remove or set a new static IP
 - modify VM availability policy
 - CAN'T CHANGE IMAGE OF STOPPED VM



## Compute Options

# Create a VM 
 - console.google.com
 - Cloudshell CLI   
      ex. gcloud compute instances creaate [instance_name]
 - REST API

Options: 
  - Project           - Machine type
  - Region            - Disk Options
  - Zone              - Image
  - Subnetwork        - IP Options


## Machine types
  - Machine family
      - Machine series
          - Machine type

# Machine Families
 - General purpose
 - Compute-optimized
 - Memory-optimized
 - Accelerator-optimized


 # General purpose
 
Series        Workload                Application
------        -----------             ----------------
E2            Day-to-Day              web serving     microservices
              Lower cost optimized    app serving     virt desktops
NOTE: Shared core

N2, N2D, N1   Balanced                web serving       med - large db
              price/performance       app serving       cache
              wide range of VM


NOTE: upto 128 vCPU w/ 0.5 GB to 8 GP per CPU
N2D == AMD Epyc CPUs


Tau T2D       Scale out optimized     scale out workloads       med - large db
              Best performance        container microservices   Large Java Apps

NOTE: T2D == Epyc TM CPUs
Predefined VM shapes   60 vCPUS / 4 GB per CPU 


 # Compute Optimized
 
Series        Workload                  Application
------        -----------             ----------------
C2            Ultra high performance    compute bound workload    microservices
              compute-intensive         gaming                    ad servering / AI / ML
NOTE:  4 - 60 CPUs, 240 GP RAM


C2D           Largest VMs               memory bound workload     high perofrmance DB
              Ultra hight perf          gaming                    high performance compute 
              compute-intensive 

NOTE: 2 - 112 vCPUs    4 GP per CPU
C2D == AMD Epyc Milan




 # Memory Optimized
 
Series        Workload                  Application
------        -----------             ----------------
M1            Ultra high memory    medium in-memory / SAP HANA    in-memory analytics
                                   high memory to vCPU            Microsoft SQL Server 
NOTE:  4 TB Memory

M2            Ultra high memory    large in-memory / SAP HANA    in-memory analytics
                                                                 genomics, SQL Analysis Server 
NOTE:  12 TB Memory



 # Accelerator Optimized
 
Series        Workload                  Application
------        -----------             ----------------
A2            Optimized high perf     CUDA-enabled ML training       High Performance Compute
              compute                 Massive parallelized computation

NOTE:  12 - 96 vCPUs  1360 GB RAM
        fixed number of NVidia GPUs (upto 16)

** cloud.google.com/compute/docs/machine-types


 # Custom Machine Type  
   - either 1 vCPU or even number vCPU
   - 0.96 GB per vCPU to 6.5 GB per vCPU (default)
   - Total memory must be multiple of 256 MB



## Pricing

- Per-second billing, with minimum of 1 minute
  - vCPU, GPU, GB RAM

- Resource based pricing:
  - each vCPU and each GB of memory billed separately

- Discounts
  - Sustained use: sustained use discounts for machine types in a region collectively  (whatever that means)
  - Committed use  (usage term of 1 year or 3 years) 57% for custom / most machine types,  70% for memory optimized
  - Premptible / Spot VM instances
    - premptible can only run for 24 hours at a time
    - spot instances do not have a maximum

- Recommendaiton Engine
  - Notifies you of underutilized instances

- Free usage limits


# Sustained use discounts 

Sustained use discounts of up to 30%                    Sustained use discounts of up to 30%    
--------------------------------------                  --------------------------------------
General purpose N1 predefined / customa                 General-purpose N2 and N2D predefined and custom 
machine types, memory-optimized, shared-code,           machine types, cpmpute optimized
sole-tenant nodes.

Usage level (% month)   % incremental is charged        Usage level (% month)   % incremental is charged        
  0 - 25%                  100% base rate                0 - 25%                  100%   base rate                
 25 - 50%                   80% base rate                25 - 50%                 86.78% base rate                
 50 - 75%                   60% base rate                50 - 75%                 73.3%  base rate                
75 - 100%                   40% base rate                75 - 100%                  60%  base rate                 

Up to 30% net discount for instances that run the entire month

** cloud.google.com/products/calculator



## Special Compute Configurations

# Preemptible
  - lower price for interruptible services (60 to 91 %)
  - VM might be termianted at any time
      - No charge if terminated in first minute
      - 24 hours max
      - 30 second terminate warning, but NOT guaranteed
          - Time for a shutdown script

  - No live migrate; no auto restart
      - monitoring / load balancer can start new instance in case of failure

  - Can request that CPU quoata for a region be split between regular and preemption
      - default: premptible VMs count against region CPU quota


# Spot VMS 
  - Latest version of preemptible VMs
  - Spot / premptible VMs share same pricing model
  - No min / max runtime
  - Spot VMs are finite Compute Engine resources, might not always be available
  - No live migrate, no auto restart

# Sole tenant nodes
  - Physically isolate workloads
  - No other customer VMs on host
  - Bring own license

┌─────────────────────────────────────────────────┐      ┌─────────────────────────────────────────────────┐
│                   Normal Host                   │      │                Sole Tenant Host                 │
│                                                 │      │                                                 │
│    ┌────────┐     ┌────────┐    ┌────────┐      │      │    ┌────────┐     ┌────────┐    ┌────────┐      │
│    │  VM1   │     │  VM2   │    │  VM4   │      │      │    │  VM1   │     │  VM2   │    │  VM4   │      │
│    │        │     │(cust 2)│    │        │      │      │    │        │     │(cust 1)│    │        │      │
│    │(cust 1)│     └────────┘    │(cust 2)│      │      │    │(cust 1)│     └────────┘    │(cust 1)│      │
│    │        │                   │        │      │      │    │        │                   │        │      │
│    │        │     ┌────────┐    │        │      │      │    │        │     ┌────────┐    │        │      │
│    │        │     │  VM3   │    │        │      │      │    │        │     │  VM3   │    │        │      │
│    │        │     │        │    │        │      │      │    │        │     │        │    │        │      │
│    │        │     │(cust 3)│    │        │      │      │    │        │     │(cust 1)│    │        │      │
│    │        │     │        │    │        │      │      │    │        │     │        │    │        │      │
│    └────────┘     └────────┘    └────────┘      │      │    └────────┘     └────────┘    └────────┘      │
│                                                 │      │                                                 │
│    ┌─────────────────────────────────────┐      │      │    ┌─────────────────────────────────────┐      │
│    │             Hypervisor              │      │      │    │            Hypervisor               │      │
│    │                                     │      │      │    │                                     │      │
│    ├─────────────────────────────────────┤      │      │    ├─────────────────────────────────────┤      │
│    │            Host Hardware            │      │      │    │           Host Hardware             │      │
│    │                                     │      │      │    │                                     │      │
│    └─────────────────────────────────────┘      │      │    └─────────────────────────────────────┘      │
└─────────────────────────────────────────────────┘      └─────────────────────────────────────────────────┘


# Shielded VMs 
 - Offer verifiable integrity
      - no boot, kernel level malware / rootkits
 - Secure Boot
 - Virtual trusted platform module (vTPM)
 - Integrity monitoring
 - NOTE: Requires Shielded Image


# Confidential VMs
 - Select Confidential
 - Encrypt data in use
 - Encrypt data while being processed (in Memory)
 - Easy to use w/ no changes to code or performance compromise
 - N2D Compute Engine VM running on 2nd gen AMD Epyc processors (Rome)
    - AMD Secure Encryption Virtualization (SEV)  
 - Provides high memory capacity, high throughput, supports parallel / compute heavy workloads


## Images 
 - Boot loader
 - Operating System
 - File system structure
 - Software
 - Customizations


# Images 
- Public base images
    - Google, third-party vendors and community; Premium images (p)* - per second after 1 min minimum  
    - Linux
        - CentOS, CoreOS, Debian, RHEL(p), SUSE(p), Ubuntu, openSUSE, FreeBSD
    - Wiidows
        - Windows Server 2019(p), 2016(p), 2012-r2(p)
        - SQL Server pre-installed on Windows(p) * - per second after 10 min minimum  

- Custom images
    - Create new image from VM: pre-configured and installed SW
    - Import from on-pre, workstation, or another cloud
    - Management features: image sharing, image family, deprecation

NOTE: Premium images vary by machine type.  
      Prices are global

# Machine Image
  - Compute Engine Resource
  - Stores all config, meta data, perms, from 1 or more disks to create a VM instances


## Disk Options 
# Boot Disk
   - VM comes w/ single root persistent disk
   - Image is loaded onto rook disk during first boot:
      - Bootable you can attach a VM and boot from it
      - Durable: can surviv VM terminate
   - Some OS images are customized for Compute Engine
   - Can suviv VM deletion if "Delete book disk when instance is deleted" is disabled

# Persistent Disk
 - Network storage appearing as block device
    - Attached to VM thru network interface
    - Durable storage : can survive terminate
    - Bootable storage: can attatch to a VM and boot from it
    - Snapshots: incremental backups
    - Performance: Scales w/ size
    - HDD (magnetic) or SSD (faster solid state)
    - Disk resizing: even running and attached
    - Can be attached in read-only mode to multiple VMs
    - Zonal or Regional
        - pd-standard
        - pd-ssd
        - pd-balanced
        - pd-extreme (zonal only / high performance DB) 
          NOTE: Regional  active - active across disk replication two zones in same Region. High performance DB or High Availability
    - Encryption keys:
        - Google managed
        - Customer managed
        - Customer supplied


# Local SSD
 - different than persistent disk
 - physically attached to VM
 - More IOPS, lower latency, higher through put
 - 375 GB disk, up to 8 == total 3 TB
 - Data survives a reset but not a VM stop / terminate
 - VM specific: cannot be reattached to a differnt VM

# RAM disk
 - tmpfs
 - faster than local disk, slower than memory
    - Use when your application expects a file system structrure and cannot directly store data in memory 
    - fast scratch disk, fast cache
    - volatile, erase on stop / restart
    - need large RAM amount
    - backup to persistent disk

                      Persistent HDD      Persistent SSD        Local SSD       RAM Disk
Data redundancy           Yes                 Yes                 No                No 
Encryption at Rest        Yes                 Yes                 Yes               N/A
Snapshotting              Yes                 Yes                 No                No
Bootable                  Yes                 Yes                 No                Not
Use case              General, bulk file     Random IOPS          High IOPS         Low latency
                                                                  low latency       risk of loss

# Maximum Pesistent Disks (attatch to a VM)
  Machine Type                Disk Number Limit
  -------------               -------------------
  Shared-Core                          16
  Standard                            128
  High-memory                         128
  High-CPU                            128
  Memory-optimized                    128
  Compute-optimized                   128

NOTE: Disk thruput will compete with Network ingress / egress


# Persistent disk management differences 
  Cloud Persisten Disk                  Computer Hardware Disk
  ---------------------                 -----------------------
 - Single file system is best             - Partitioning
 - Resize (grow) disks                    - Repartition disk
 - Resize file system                     - Reformat
 - Built-in snapshot services             - Redundnat disk arrays
 - Automatic encryption                   - Subvolume management and snapshots
                                          - Encrypt files before write to disk

# Common Compute Engine Actions

# Metadata and scripts
NOTE: Every comptue instance stores data on metadata server

Time    Boot         Run          Maintenance     Shutdown
        |  ^         |  ^           |  ^            |  ^ 
        v  |         v  |           v  |            v  | 
      metadata     metadata       metadata        metadata  

   startup-script-url=URL                         shutdown-script-url=URL   


Can get information about instance:
  i.e. get key value pair for external IP


# Move an instance to a new zone
  Zone 1                              Zone 2 
  +----------------+            +----------------+
  |                |            |                | 
  |   +-------+    |            |   +-------+    | 
  |   |  VM   | ---|------------|-> |  VM   |    |
  |   +-------+    |            |   +-------+    |
  |                |            |                | 
  +----------------+            +----------------+

  gcloud compute instances move

- Autmoated process (moving within region)
    - gcloud compute instances move
    - Update references to VM; not automatic
        - target VMs or target pools
  
- Manual process (moving between regions)
    - snapshot all persistent disks on the source VM
    - create new persistent disks in the destination zone restored from snapshots
    - create a new VM in the destination zone and attache new persisten disks
    - Assign static IP to new VM
    - Update references to VM
        - target VMs or target pools
    - Delete the snapshots, original disks and original VM

# Snapshots
- backup critical data from disk to cloud storage
- migrate data between zones (see manual VM migration)
- transfer data to different disk type (HDD -> Snapshot -> SDD)

# Persistent disk Snapshots
- Not available for local SSD

- Creates an incremental backup to Cloud Storage (also compressed)
    - not visible in your buckets; managed by snapshot services
    - consider cron jobs for periodic incremental backup

- Snapshots can be restored to a new persistent disk
    - New disk can be in another region or zone in the same project
    - Basis of VM migration: "moving" a VM to a new zone
        - Snapshot doesn't backup VM metadata, tags, etc.

# Resize Persistent Disk
  - can grow but not shrink disks
      
      - can be done on running VM



















#############################################################################
## Essential Google Cloud Infrastructure: Core Services
#############################################################################

## Introduction

<--------------------------   Google Cloud Products and Services  -------------------------->   
Iaas                                     PaaS                                            SaaS

CPUs, Memory                 Servers                         Clusters              Serverless
Disks, Interfaces           VM Instances                Cluster Management        Autoscaling

IT Ops                  Sys Ops              Dev Ops               Low Ops             No Ops



############################################
## Identity and Access Management (IAM)


     Who              can do what                     on what resource
  - person            - specific privileges           - any google cloud services 
  - group             - actions 
  - applicaton 


## IAM Objects
  Organization 
       +- Folders 
          +- Projects 
              +- Resources 
                  +- Roles 
                      +- Members 


NOTE:  ** Each resource has exactly 1 parent
      - roles granted at organization are inherited by all resources under organization 
      - roles granted at folder       are inherited by all resources folder contains 
      - services under project have same default level of trust


## Organization Node
  - root node for Google Cloud Resources

# Organization Roles 
  - Organization Admin:  control over all cloud resources 
  - Project Creator   :  controls project creation


Organization Resource:
  - Associated with G Suite / Google Workspace  or 
      Cloud Identity account


When Workspace or Identity account creates GCP project, organization resource provisioned for them 
Super Admin role: 
   - assign Organization Admin role to some users
   - point of contact for recovery issues
   - control Lifecycle of Workspace / Cloud Identity account and Organization resource

Organization Admin role: 
   - Define IAM policies
   - Determine structure of resource hierarchy
   - Delegate responsibility over critical components such as:
      - Networking
      - Billing
      - Resource hierarchy via IAM roles


## Folders 
- Organization within an organization
- Additional grouping mechanism / isolation boundaries between projects
    - Legal Entities
    - Departments
    - Teams
NOTE: Folders allow delegation of admin rights    
    - Folders can contail projects and other folders


Resource Manager Roles       | Policy 
    - Organization           |
        - Admin              | Inheritance
        - Viewer             |
    - Folder                 v
        - Admin              |
        - Creator            |
        - Viewer             |
    - Project                |
        - Creator (automatic |
                   owner)    |
        - Deleter            v


## Roles 
 3 types:
   - Basic
   - Predefined
   - Custom

# Basic Roles
  - original roles available in google cloud console
    - Owner
        - Invite, remove, delete projects
    - Editor
        - Deploy, Modify, Config
        - Deploy, Modify, Config
    - Viewer
        - Read Only
    - Billing Amdin
        - billing / add, remove admins

NOTE: Each projects can have multiple Owner, Editor, Viewers, Billing Admins

GCP Services have:
   - own set of pre-defined roles 
   - where roles can be applied

collection of permissions on a service

# Pre-defined roles more fine-grained:
                                            compute.instances.delete 
  - InstanceAdmin Role      ------------->  compute.instances.get
                                            compute.instances.list, etc. 

NOTE: permissions are classes and methods in API

ex. Compute Admin Roles
Role                  Description
-----------          ------------------------------------ 
Compute Admin         Full control of compute.*
Network Admin         Create, modify, delete networking resources  (except firewall rules / SSL certs)
Storage Admin         Create, modify, delete disks, images, snapshots


# Custom roles
  - define precise set of perms
  - least privilege:   Instance Operator role == compute.instances. (get, list, start, stop)

NOTE: Custom roles are NOT maintained by Google 

 
## Members 

** 5 Types of Members
  - Google Account
  - Service Account
  - Google Group
      - Collection of Google Accounts and Service Accounts
        - Apply access policy to group of users
  - Google Workspace Domain
  - Cloud Identity Domain

NOTE:  ** You CANNOT use IAM to create or manage your users or groups

## IAM Policy 
Policy == Member Identity + Roles
  - A policy consists of a list of bindings
  - A binding binds a list of members to a role
       - role named a list of permissions 

Policy = collection of access statements attached to resource 

NOTE: Resource policy is a union of parent and resource
**    - Less restrictive parent policy will override more restrictive resource policy
      - Child policies cannot restrict access granted at parent level
       !! hence least privilege


## IAM Conditions 
  - Enforce conditional, attribute-based access control for Google Cloud Resources 
      - grant resource access to identities only if configured conditions are met
      - specified in role bindings of a resource's IAM policy


## Organization Policy
  - configuration of restrictions
  - configure a constraint w/ desired restrictions
  - applied to Orginization node, folders or projects



# Google Cloud Directory Sync

                           Google Cloud
Active Directory or     -- Directory Sync -->  Users and groups in Cloud Identity domain
LDAP                    (scheduled one way)

# Single Sign-On (SSO)
  - Use Cloud Identity to configure SAML SSO
  - If SAML2 isn't supported use 3rd pary (ADFS, Ping, Okta) 


## Service Account
  - provides an identity for carrying out Server-to-Server interactions
  - belongs to Application and not end user
  - Compute Engine instances can automatically acquire access tokens with credentials 
  - Tokens are used to access any service API in your project.

identified by email address :  12321322-compute@project.gserviceaccount.com

3 types of service accounts: 
  - User-created (custom)
  - Built-in 
      - Compute Engine / App Engine default service accounts
  - Google APIs service account
      - Runs internal Google processes on your behalf

# Default Compute Engine Service Account 
  - Automatically created per project with auto-generated name and email address:
        ex. 29xxxxxx0956-compute@developer.gserviceaccount.com 
  - Automatically added as a project Editor
  - By default, enabled on all instances created using gcloud or Cloud console


## Scope
  - Autheticated Identity gets a scope i.e. read_only, read_write
  - Each service as scopes
  - Scopes can be changed after an instance is created

  Scopes customized when creating default service account 

Access scopes WERE (before IAM) only way to grant permissions to service accounts for VM
NOTE: for user-created service accounts, use IAM roles 
 
 
Roles for services accounts can be assigned to Groups or Users 
 
Service Account -->> InstanceAdmin Role -->> Compute Instances   
User/Group -->>  ServiceAccountUserRole -->> Service Account 
 
Cloud IAM can "slice up" a project with different microservices by 
assigning different Service Accounts to different resources.  

 
## 2 Types of Google Service Accounts 
Google Managed Service Accounts                 User Managed Service Accounts
- all service accounts have                     - Google only stores the public portion of a 
  Google-managed keys                             user managed key

- Google stores both the public and            - Users are responsible for private key security 
  private portion of the key  

- Each public key can be used for signing      - Can create up to 10 user-managed service account
  for a maximum of two weeks                     keys per service
 
- Private keys are never directly accessible    - Can be administerd via the IAM API, gcloud, console
 

NOTE:  Google does not save your user-managed private keys !!

# List all keys associated with a Service Account 

gcloud iam service-accounts keys list --iam-account user@email.com


## IAM Best Practices 
 - Leverage / understand resource hierarchy
 - Use project to group resources that share same "trust boundary"
 - Check policy granted on each resources -- Understand Inheritance
 - Use principle of least privilege when granting roles
 - Audit policies in Cloud Audit Logs: setiampolicy
 - Audit membership of groups used in policies

# Grant Roles to Groups not individuals
   - audit membership
   - control ownership of Google group used in IAM policies

# Service Account 
  - carefule when granting serviceAccountUser role
  - Clearly identify Service Account purpose when naming
  - Establish a naming convention for Service Accounts
  - Establish key rotation policies / methods
  - Audit with serviceAccount.keys.list()

# Identity-Aware Proxy (IAP)
  - enforce access control policies for apps and resources 
  - identity-based access controls
  - central authorization layer for apps accessed by HTTPS
  - IAM policy applied AFTER authentication



#################################
## Storage and Database Services

## Cloud Storage
  - object storage service
  - website content
  - archiving / DR
  - distributing large data objects to 
    users via direct download

# Cloud Storage features:
  - scalable to exabytes
  - time to first byte in ms
  - very high availability across all storage classes
  - single API across storage classes

Collection of buckets you place objects into
  - directory is just another object that points to other objects

# Cloud Storage classes:
                              Standard                      Nearline                        Coldline                Archive
Use Case              Hot data and/or stored              Infrequently accessed data      Infrequently accessed     Data archiving, 
                      for only brief periods of           i.e. data backup, long-tail     data read / modify at     online backup, DR 
                      time i.e. data instense compute     multimedia, data archiving      most 1x / quarter         read < 1x / yr
                                                              read < 1 per 30 days
Min Storage Duration          None                              30 Days                         90 Days                 365 Days

Retrieval Cost                None                              $0.01 / GB                     $0.02 / GB               $0.05 / GB

Availability SLA          99.95% (multi / dual)               99.9% (multi/dual)               99.9% (multi/dual)       99.9% (multi/dual)
                            99.9% (region)                    99.0% (region)                   99.0% (region)           99.0% (region)
Durability                  99.999999999%                     99.999999999%                    99.999999999%            99.999999999% 

NOTE: Each storage class has three location types:
Multiregion: large geographic area i.e. U.S.  ( 2 or more geographic regions)
Dual Region: specific pair of regions i.e. (Finland, Netherlands)
Region     : specific geographic place i.e. (London)


Cloud Storage Overview:
  - Buckets 
      - Naming requirements
      - Cannot be nested
  - Objects 
      - Inherit storage class of bucket when created
      - No minimum size; unlimited storage (??)
  - Access
      - gsutil 
      - RESTful JSON API or XML API

Change Default Storage Classes:
  - Default class is applied to new objects 
      - Can specifiy storage class for the object
      - Can change default storage class for bucket
          - CAN'T CHANGE  LOCATION TYPE:  from multi-region to dual, vice versa, etc.
  - Multi-regional bucket can never be changed to regional
  - objects can be moved from bucket to bucket
  - Object Lifecycle Management: manage classes of objects



IAM: Roles are inherited from Project to Bucket to Object

  +-------- Project --------+ 
  |                         |         | IAM
  |      [ Bucket   ]       |         | ACLs
  |      [          ]       |  <------| Signed URL               ( Signed and Timed Crypto Key )
  |      [ {Object} ]       |         | Signed Policy Document   ( Controls File Upload Policy )
  |      [          ]       |
  |      [----------]       |
  |                         |
  |                         |
  +-------------------------+ 

# ACL:  Who has access to your buckets and objects 
      What level of objec

** MAX:  100 ACL per bucket
ACL has:
  - Scope     :  Who can perform what actions   (user / group of users)
                    - allUsers
                    - allAuthenticatedUsers
  - Permission:  What actions cab be performed  (Owner, Writer, Reader)

# Signed URL 
  - "Valet key" access to buckets and objects via ticket
      - Ticket is a cryptographically signed URL
      - Time-limited
      - Operations specified in ticket: HTTP GET< PUT, DELETE (not POST)
      - Any user with URL can invoke permitted operations

 Example using privaate account key and gsutil: 
  gsutil signurl -d 10m path/to/privatekey.p12 
  gs://bucket/object
 
 
# Additional Cloud Storage features:
  - Customer supplied encryption key (CSEK)
      - Use your own key instead of Google-managed keys

  - Object Lifecycle Management
      - Automatically delete or archive objects

  - Object Versioning
  - Directory Synchronization 
      - Sync a VM directory with a bucket
  - Object change notification
  - Data import
  - Strong consistency
 
# Object Versioning 
  - Objects are immutable 
  - When versioning enabled for a bucket:
          - Creates archive version of object each time 
            object is overwritten or deleted. 
          - Maitain history of modifications of objects
          - list archived versions of an object
              - restore an object to older state
              - delete a version
  - Can turn versioning on or off for a bucket at any time
 
 
 
# Object Lifecycle Management 
  - assign lifecycle config to a bucket
      - downgrade storage class on objects older than a year
      - delete objects created before specific date
      - keep only 3 most recent version of an object

NOTE:  Object inspection occurs in asynchronous batches (might not happen right away)
       Changes can take 24 hours to apply




# Object Change Notification

  - Nofiy App when object is updated or added to bucket
    notification channel: web hook
    - notifies when object is add, update or removed from bucket
Recommended: Pub/Sub Notifications for Cloud Storage


# Data Import Services 
 - Transfer appliance      : Rack, capture and then ship your data to Google Cloud
 - Storage Transfer Service: Import online data (another bucket, an S3 bucker or web source)
 - Offline Media  Import   3rd Party provider uploads the data from physical media


# Cloud Storage provides strong global consistency 
  - read-after-write
  - read-after-metadata-update
  - read-after-delete
  - bucket listing
  - object listing

## Filestore 
  - managed file storage service for applications
  - managed network attached storage (NAS) for comput engine / GKE
  - Predictable performance
  - Full NFSv3 support
  - Scales 100s of TBs for high performance workloads

# Filestore Use Cases 
  - Application migration
  - Media rendering
  - Electronic Design Automation (EDA)
  - Data Analytics
  - Genome processing
  - Web content management


## Cloud SQL 
- Fully managed database service 
  - MySQL
  - PostgreSQL
  - Microsoft SQL Server
- Patches updates automatically applied 
- Administer MySQL users
- Supports many clients
  - Cloudshell 
    - gcloud sql
  - App Engine, Google Workspace scripts
- Supports Apps Tools 
  - SQL Workbench, Toad 
  - External apps using MySQL drivers


Performance:
  - ** 64 TB Storage
  - ** 60k IOPS
  - ** 624 GB RAM
  - ** 96 Processor cores
  - ** Scale out w/ read replicas

Choices:
  - MySQL 5.6, 5.7 (default) or 8.0
  - PostgreSQL 9.6, 10, 11, 12, 13 (default) or 14
  - SQL Server 2017 or 2019 (default)


# Cloud SQL Services 
  - HA Configuration 
      - Primary Instance (Zone A) --> Standby Instance (Zone B) (within Region, )  
        - synchronous replication to both zones

  - Backup service
    - Point in time recovery

  - Import / Export 
    - MySQL dump, csv files

  - Scaling 
    Up : Machine capacity (requires restart)
    Out: Read Replicas

Decision Tree:

in-memory store                     -->> Memorystore
non-relational / document db        -->> Firestore (like mongodb ?)
non-relational / non-document db    -->> Cloud Bigtable (like Hadoop)
relational / analytics              -->> BiqQuery   (No Updates)
relational / ACID / < 99.999% Avail -->> Cloud SQL 
relational / ACID / > 99.999% Avail -->> Cloud Spanner



## Cloud Spanner
 - combines relational db with non-relational horizontal scale 
   - Scale to petabytes
   - Strong consistency
   - High Availability
   - used for financial / inventory apps
   - ** Monthly Updatime 
    - Multi-Regional  99.999% (5 - 9's)
    - Regional 99.99% (4 - 9's)

# Characteristics **
                  Cloud Spanner                  Relational DB                  Non-Relational DB
Schema                Yes                             Yes                             No
SQL                   Yes                             Yes                             No
Consistency           Strong                          Strong                          Eventual
Availability          High                            Failover                        High
Scalability           Horizontal                      Vertical                        Horizontal
Replication           Automatic                       Configurable                    Configurable


# Cloud Spanner Architecture

┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                │
│                                            Cloud Spanner Instance                                              │
│                                                                                                                │
│                                                                                                                │
│                                                     +------ Update                                             │
│                                                     |                                                          │
│                                                     |                                                          │
│                                                     v                                                          │
│      ┌──────────────────────────┐       ┌──────────────────────────┐         ┌──────────────────────────┐      │
│      │                          │       │                          │         │                          │      │
│      │          Zone 1          │       │        Zone 2            │         │         Zone 3           │      │
│      │                          │       │                          │         │                          │      │
│      │   ┌───────────────────┐  │       │   ┌───────────────────┐  │         │   ┌───────────────────┐  │      │
│      │   │     DB 1          │<-------------│     DB 1          │--------------->│     DB 1          │  │      │
│      │   └───────────────────┘  │       │   └───────────────────┘  │         │   └───────────────────┘  │      │
│      │                          │       │                          │         │                          │      │
│      │   ┌───────────────────┐  │       │   ┌───────────────────┐  │         │   ┌───────────────────┐  │      │
│      │   │     DB 2          │<-------------│     DB 2          │--------------->│     DB 2          │  │      │
│      │   └───────────────────┘  │       │   └───────────────────┘  │         │   └───────────────────┘  │      │
│      │                          │       │                          │         │                          │      │
│      └──────────────────────────┘       └──────────────────────────┘         └──────────────────────────┘      │
│                                                                                                                │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

NOTE: 

 - Cloud spanner instance replicates data in "N" Cloud Zones
      - Can be in 1 region OR several regions

 - Database placement is configruable
      - Can choose which region to put database in

 - High Availability / Global Placement

 - Replication is synchonized across zones using Google global fiber network
 - Atomic clocks used to ensure Atomicity when updating data


# Cloud Spanner Decision Tree

Out grown single instance RDBMS   |
Sharding for DB throughput        |
Need transactional consistency    |-- YES  >> Consider Cloud Spanner 
Global data + strong consistency  |
DB consolidation                  |


## Firestore

- NoSQL Document Database
- fully managed / serverless
- ACID Transactions
- Multi-region replication
- Mobile, web, IoT Apps @ global scale
- live synchronization
- integration w/ firebase
- powerful query engine

Firestore next gen of Datastore
 - Datastore mode: backwards compatible w/ Datastore apps 
 - queries now strongly consistent
 - realtime updates
 - Collection and document data model


# Cloud Firestore Decision Tree

Schema might change / need adaptable databse  -- Y -->> Firestore
Scale down to zero                            -- Y -->> Firestore
Want low maintenance overhead scaling to TB   -- Y -->> Firestore
Transactional Consistency                     -- N -->> Bigtable
Transactional Consistency                     -- Y -->> Cloud SQL / Spanner


## Cloug Bigtable
 - NoSQL big data database service (Think: Hadoop / HBase)
 - Fully managed / wide column DB
 - Petabyte scale
 - Consisten sub 10ms latency
 - Seamless scalability for throughput
 - Learns and adjusts to access patterns (huh ??)
 - Ideal for Ad Tech, Fintech, IoT
 - Storage engine for ML Apps
 - Easy integration with open source big data tools:  Hadoop / HBase
 - High read / write throughput @ low latency



# Cloud Bigtable storage model 
 - wide sparse columns 
 - sorted key / value map

               |---------------------- Follows ---------------------------|
Row Key           gwashington       jadams      tjefferson        wmmckinley
gwashington                            1
jadams                1                             1
tjefferson            1                1                              1
wmmckinley                                          1


# Cloud Bigtable Architecture
 - Processing is separated from storage

               ____        ____          ____        ____          ____        ____  
              /    \      /    \        /    \      /    \        /    \      /    \ 
Clients      |      |    |      |      |      |    |      |      |      |    |      |
              \____/      \____/        \____/      \____/        \____/      \____/  
                  +-----------+            +-----------+             +-----------+ 
                        |                        |                         |
               +------------------+      +------------------+      +------------------+
Processing     |   Big Table      |      |   Big Table      |      |   Big Table      |
               |      Node        |      |      Node        |      |      Node        |
               +------------------+      +------------------+      +------------------+
                        |                        |                         |
                        |                        |                         |
                        |                        |                         |
Storage     +-----------v------------------------v-------------------------v----------------+
            |                                                                               |
            |                             Collossus File System                             |
            |                                                                               |
            +-------------------------------------------------------------------------------+

NOTE: Bigtable table is shared into blocks of contiguous rows called tablets
      Tablets similar to HBase regions.
      Saved in SSTable format (?): persistent ordered immutable map from keys to value
      Throughput scales linearly, more nodes == faster throughput


# Cloud Bigtable Decision Tree

Storring > 1TB                      -- Y -->> Bigtable
High volumes or writes              -- Y -->> Bigtable
r/w latency < 10ms                  -- Y -->> Bigtable
strong consistency                  -- Y -->> Bigtable
HBase API compatible                -- Y -->> Bigtable
else                                -- N -->> Firestore


- Bigtable scales  UP well
- Firestore scales DOWN well

** Smallest Bigtable cluster that can be created: 
 - 3 nodes / 30k Ops / sec 



## Memorystore 
 - Fully managed Redis service
 - In-memory data store service
 - High availability, failover, patching and monitoring
      - HA instances replicated across 2 zones 
      - 99.9% availability sla
 - sub-millisecond latency
 - instances 300 GB
 - Network throughput of 12 Gbps
 - Easy lift and shift via import / export tools


#################################
## Resource Manager

# Hierarchically manage resources 
GCP -> Organization -> Folders -> Projects -> Resources -> VM

# Billing and Resource Monitoring

 - Resources belong to one and only one project
  | 
  +-> Project is associated with one billing account
    | 
    +-> Organization contains all billing accounts
      | 
      +-> Billing and Resource Monitoring


# Organization node is root node for GCP resources

- Projects acculate consumption of all resources 
   - Track resource and quota usage
      - Enable billing
      - Manage permissions and credentials
      - Enable services and APIs

   - Projects use three identifying attributes  ***
      - Project Name
      - Project Number
      - Project ID (aka Application ID)

# Resources can be global, regional or zonal
  global  :  Images, snapshots, networks
  regional:  External IP Addr
  zonal   :  Instances, disks

## Quotas
# All resources subject to project quotas or limits
 -  how many resources can create per project
    - 15 VPC networks / project

 -  how quickly you can make API requests in a project / rate limit
    - 5 admin actions / second (Cloud Spanner)

 -  how many resouces you can create per region
    - 24 CPUs region / project

Increase via Quotas page in Google Cloud console

# Quota reasons
  - prevent runaway consumption
  - prevent billing spikes / surprises
  - force sizing consideration



## Labels
 - Utility for organizing GCP resources
 - Key / Value pairs attached to resources
 - Attached to resources: VM, disk, image, etc. 
  - GCP console, gcloud, api

*** Each resource can have 64 labels
  - can filter resources 
  - use in scripts / inventory
      - run bulk operations


Label types:
  - Team / Cost Ctr:  team: marketing
  - Component:        component: redis
  - Environment:      env: prod
  - Owner:            owner: ops
  - State:            state: inuse
                      state: ready_for_deletion


Labels vs Tags
Labels                            Tags
  organize resources                Applied to instances only
  user defined key-value            user defined strings
  propagated thru billing           tags primarily used for networking (firewall rules)


## Billing
  - Budget name
  - Project for Budget
  - Budget amount
  - Actions 
      - alerts sent via email after % of budget or $ amount


Cloud Pub/Sub can receive notification about budget
    -> Cloud Functions can automate cost management


use labels and export billing data to BigQuery

- visualize spend with Data Studio




#################################
## Resource Monitoring

Google Cloud Operations Suite == Stackdriver

 - Integrated monitoring, logging, diagnostics 
 - Google Cloud and AWS

Stackdriver / Google Cloud operations Suite 
    - monitoring
    - logging
    - error reporting
    - trace
    - debugger

## Monitoring

 - Used for Site reliability engineering
 - Dynamic config / intelligent defaults
 - Platform, system and app metrics 
    - ingests metrics, events, metadata
 - uptime / health checks
 - dashboards
 - alerts

# metrics scope    ==  "Single Pane of Glass" 
  - can have 1 to 100 monitored projects
  - gcp projects and aws accounts can only be monitored with 1 metric scope

# Hosting Project
  - first monitored gcp project in metric scope
    - monitoring 
    - dashboards 
    - uptime checks 
    - configs
  - AWS Connector must be configured in a GCP Project created to hold AWS Connector

** Access to metrics scope has access to all projects metrics 
  - need separate metrics scopes if you need fine grained access 

# Alerting Policies 
  - metric / condition / threshold / time >> notify

i.e. outbound traffic / above / 1000000 bytes / 1 min >> sms, email 

- uptime check:  http, https, tcp
    - app engine app
    - compute engine instance
    - url of host
    - aws instance / load balancer 

Can get some metrics without monitoring agent:
 - cpu util  
 - disk traffic metrics
 - network traffic
 - uptime 

-  Monitoring agent available for compute engine and EC2
install via :
  curl -sS0 https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh
  sudo bash add-monitoring-agent-repo.sh

- custom metrics can be created.


## Logging / Cloud Logging (formerly Stackdriver Logging)
  - fully managed service
  - store, search, monitor alert log data and events from gcp and aws 

  - Platform, system, application logs 
    - API to write to logs
    - 30 day retention

  - Log search / view / filter
  - Log based metrics
  - Logs can be exported to:
    - Cloud Storage
    - BigQuery:  Analyze logs w/ BigQuery and Data Studio  
    - Pub/Sub


install logging agent (compute engine / EC2): 
  curl -sS0 https://dl.google.com/cloudagents/install-logging-agent.sh
  sudo bash install-logging-agent.sh

## Error Reporting

  - counts, analyzes, aggregates errors in running cloud services
  - Error dashboard / notifications

  - AppEngine, Compute Engine, Cloud Functions, Cloud Run, GKE, EC2 
  - Go, Java, .NET, Node.js, PHP, Python, Ruby

## Tracing / Cloud Trace
  - distributed tracing system 
  - collects latency data 
  - displayted in GCP Console

  Can run on :
  - App Engine
  - Google HTTP(S) load balancers
  - Cloud Trace SDKs

## Debugging / Cloud Debugger
  - inspect state of app in realtime without stopping / slowing significantly
  - debug snapshots:
      - call stack / local variables
  - debug logpoints:
      - inject logging into services without stopping
  - Java, Python, Go, Node.js, Ruby, PHP, .Net





#############################################################################
## Elastic Cloud Infrastructure: Scaling and Automation  
#############################################################################



#################################
## Interconnecting Networks

## Cloud VPN 
 - Securely connects on-prem with Google Cloud VPC network
    - IPSec VPM Tunnel
    - Encrypted / Decrypted via VPN Gateway
    - Low-volume data connections
    - 99.9% SLA ***
    - Regional Resouce w/ Regional External IP

 - Supports:
    - Site-to-Site VPN
    - Static Routed
    - Dynamic Routes (Cloud Router)
    - IKEv1 / IKEv2 ciphers

      ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
      │                                                                               ┌─────────────────┐                                                  │
      │                                                                               │                 │                                                  │
      │                                                         ┌─────────────────────┤    Internet     ├────────────────────┐    Max MTU 1460 Bytes ***   │
      │                                                         │                     │                 │                    │                             │
      │                                          VPN Tunnel     │                     └─────────────────┘                    │                             │
      │                                     (Encrypted Traffic) │                                                            │                             │
      │     ┌───────────────────────────────────────────────────┼───────────────────────┐                  ┌─────────────────┼───────────────────────┐     │
      │     │ Project                                           │                       │                  │                 │ On Prem External IP   │     │
      │     │                                                   │                       │                  │       ┌─────────┴──────────┐            │     │
      │     │  ┌────────────────────────────────────────────────┼───────────────────┐   │                  │       │                    │            │     │
      │     │  │                                                │                   │   │                  │       │    On Premise      │            │     │
      │     │  │ VPC Network                       ┌────────────┼───────────────┐   │   │                  │       │      Gateway       │            │     │
      │     │  │   ┌───────────┐  ┌────────────┐   │            │  GCP Regional │   │   │                  │       │                    │            │     │
      │     │  │   │  VPC      │  │            │   │            │  External IP  │   │   │                  │       │                    │            │     │
      │     │  │   │  Routing  ├──┤   Routing  │   │   ┌────────┴──────────┐    │   │   │                  │       └─────────┬──────────┘            │     │
      │     │  │   │           │  │            ├───┼───┤    Cloud VPN      │    │   │   │                  │                 │                       │     │
      │     │  │   └────┬───┬──┘  │    Table   │   │   │      Gateway      │    │   │   │                  │                 │                       │     │
      │     │  │        │   │     │            │   │   └───────────────────┘    │   │   │                  │                 │                       │     │
      │     │  │        │   │     └────────────┘   │                            │   │   │                  │                 │                       │     │
      │     │  │        │   │                      │                            │   │   │                  │                 │                       │     │
      │     │  │        │   │                      │                            │   │   │                  │   ┌─────────────┴───────────────────┐   │     │
      │     │  │  ┌─────┼───┼──────────────┐       │                            │   │   │                  │   │                                 │   │     │
      │     │  │  │     │   │              │       │  ┌──────────────────────┐  │   │   │                  │   │       On Premise Subnets &      │   │     │
      │     │  │  │     │   │              │       │  │                      │  │   │   │                  │   │            Resources            │   │     │
      │     │  │  │     │   └──────────────┼───────┼──│ 192.168.1.0 / 24     │  │   │   │                  │   │                                 │   │     │
      │     │  │  │     │                  │       │  │                      │  │   │   │                  │   │      ┌───────────────────┐      │   │     │
      │     │  │  │  ┌──┴─────────────┐    │       │  │                      │  │   │   │                  │   │      │   10.0.1.0 / 24   │      │   │     │
      │     │  │  │  │ 10.21.0.0 / 16 │    │       │  │                      │  │   │   │                  │   │      └───────────────────┘      │   │     │
      │     │  │  │  │                │    │       │  │     Google Cloud     │  │   │   │                  │   │                                 │   │     │
      │     │  │  │  │  Google Cloud  │    │       │  │       Resources      │  │   │   │                  │   │      ┌───────────────────┐      │   │     │
      │     │  │  │  │    Resources   │    │       │  │                      │  │   │   │                  │   │      │   10.0.2.0 / 24   │      │   │     │
      │     │  │  │  └────────────────┘    │       │  └──────────────────────┘  │   │   │                  │   │      └───────────────────┘      │   │     │
      │     │  │  │ us-west1               │       │ us-east1                   │   │   │                  │   │              ....               │   │     │
      │     │  │  └────────────────────────┘       └────────────────────────────┘   │   │                  │   │      ┌───────────────────┐      │   │     │
      │     │  │                                                                    │   │                  │   │      │   10.0.30.0 / 24  │      │   │     │
      │     │  └────────────────────────────────────────────────────────────────────┘   │                  │   │      └───────────────────┘      │   │     │
      │     │                                                                           │                  │   │                                 │   │     │
      │     └───────────────────────────────────────────────────────────────────────────┘                  │   └─────────────────────────────────┘   │     │
      │                                                                                                    └─────────────────────────────────────────┘     │
      └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘



## HA VPN 
 - Provides 99.99% SLA
      - must configure 2 or 4 tunnels from on-prem to cloud
 - Google Cloud automatically chooses two external IP addr
 - Each interface supports multiple tunnels
 - VPN Tunnels connect to HA VPN gateway MUST USE DYNAMIC (BGP) Routing **
 - Can be active / active or active / passive

 - Site to SIte topologies:
    - HA VPN Gateway to peer VPN device 
    - HA VPN Gateway to  AWS Virtual Private Gateway
    - Two HA VPN Gateways to each other



## Dynamic Routing w/ Cloud Router
  - Must have Link Local IP Addresses to setup BGP connectivity
      169.254.0.0 / 16  ***

  - Used for establishing BGP sessiong


## Cloud Interconnect and Peering

              Dedicated                                 Shared
             -------------                            -------------
Layer 3     Direct Peering  <---- [Cloud VPN] ---->  Carrier Peering

Layer 2     Dedicated Interconnect                   Partner Interconnect

Interconnect == Layer 2
Peering      == Layer 3

 - Dedicated == Direct connection to Google Network
 - Shared    == Connection to Google Network thru partner


Layer 2: uses VLAN into GCP to access internal addresses  RFC 1918

Layer 3: Access to G Suite services, Youtube, Google Cloud APIs using public IP addresses


Cloud VPN between Direct Peering and Carrier Peering



## Cloud Interconnect

# Dedicated Interconnect 
  - connections between on-prem and GCP 
  - provision cross-connect between on-prem and Colo 
  - configure BGP connection between cloud router and on prem router

my-network (my-project1)

[us-cetral1 10.128.0.0 / 20 ]                                           On-prem Network        Subnet: 192.168.0.0 / 24

[  Compute ]   <-->  [Cloud Router]  <------> [Colo Facility]         [On-prem Router ] <-->  [On-prem Router ]        
[10.128.0.2]         [169.254.10.1]           [    Google   ] <-----> [ 169.254.10.2  ]       [ 192.168.0.11  ]        
                      (BGP Addr)              [Peering Edge ]            (BGP Addr)
                                                    

# Partner Interconnect 
 - connectivity throught a supported service provider 

[  Compute ] <--> [Cloud Router]  <---> [Colo Facility]        [ Service ]       [On-prem Router ] <-->  [On-prem Router ]        
[10.128.0.2]      [169.254.10.1]        [    Google   ] <--->  [ Provider] <---> [ 169.254.10.2  ]       [ 192.168.0.11  ]        
                   (BGP Addr)           [Peering Edge ]        [ Network ]        (BGP Addr)
                                                    
# Interconnect options  *******

Connection                      Provides                      Capacity  ***         Requirements          Access Type
-------------                  -------------                  -------------         -------------         -------------  
IPsec VPN Tunnel              Encrypted tunnel to VPC         1.5 - 3 Gbps        On-prem VPN gateway     Internal IP Addr
                              networks throught the           per tunnel 
                              public internet

Dedicated Interconnect        Dedicated, direct connection    10 Gbps per link     Connection in          Internal IP Addr 
                              to VPC networks                 100 Gbps (beta)      colocation facility

Partner Interconnect          Dedicated bandwidth,            50 Mbps - 10 Gbps     Service Provider      Internal IP Addr
                              connection to VPC network       per connection
                              thru a service provider  

## Peering

# Direct Peeting
  - provides direct connection to GCP
  - Exchange BGP Routes
  - No SLA
  - via Edge Points of Presence (PoPs)

# Carrier Peeting
  - via Carrier partner
  - reach all Google's services
  - Partner requirements
  - No SLA


# Peering options  *******

Connection              Provides                      Capacity  ***         Requirements       Access Type
-------------          -------------                  -------------         -------------      -------------  
Direct Peering       Dedicated, direct connection     10 Gbps per link      Connection in      Public IP Addr
                     to Google's network                                    GCP PoPs

Carrier Peering      Peering through service          Varies based on       Service PRovider   Public IP Addr
                     provider to Google's             partner offering  
                     public network



## Sharing VPC Networks

# Shared VPC
  - connect resources from multiple projects to common VPC network
  - dedicate project as host project and connect other projects to it

# VPC Peering 
  - Private RFC 1918 connectivity across 2 VPC netowrks
   [ VPC Consumer ] <-- private ip addr --  [ VPC Producer ] 
   [     Network  ] -- private ip addr -->  [     Network  ] 



# Shared VPC  vs.  VPC Peering 

Consideration           Shared VPC          VPC Netowrk Peering
-------------          -------------        --------------------  
Across organization        No                     Yes
Within Project             No                     Yes
Network Admin            Centralized           Decentralized



#################################
## Load Balancing and Autoscaling

## Global / regional load balancer

   Global            Regional 
-------------     --------------------  
  - HTTP(S)        - Internal TCP / UDP
  - SSL proxy      - Network  TCP / UDP
  - TCP procy      - Internal HTTP(S)



## Managed Instance Groups
  - collection of identical VM instances
  - control with instance template
  - update all instances with new template
  - can scale automatically
  - can work with load balancers

  [Web VM 1 ] --+
  [Web VM 2 ] --|+------ [ Server Instance Template ]
  [Web VM 3 ] --+

1. Create Instance template
2. Create manage Instance Group of N instances
      - name, single/multi zone / location, instance template, autoscaling, autohealing 


#  Autoscaling and health checks 
 - dynamically add / remove instance 
 - increase / decrease load

# Autoscaling Policy 
 - CPU Utilization 
 - Load balancing capacity
 - Monitoring Metris 
 - Queue based workload

# Healthcheck
 - Protocol, port, health criteria
 - check interval,    timeout
 - healthy threshold, unhealthy threshold

## HTTP(S) Load Balancing
 - Layer 7
 - Global load balancing
 - Anycast IP Addr
 - HTTP or 80 or 8080 
 - HTTPS on 443
 - Autoscaling 
 - URL maps

HTTP(S) Load Blancer Architecture

[Going Forward Rule] <---------- [Internet]
        |
        v                                           +--------> [Instance Grp - VM 1]
[  Target Proxy    ]   +-->  [  Backend Service ] --+--------> [Instance Grp - VM 2]
        |              |              |             +--------> [Instance Grp - VM 3]
        v              |              v
[  URL Map         ] --+     [    Health Check  ] 

# Backend Services 
  - Health Check
  - Session affinity 
  - Timeout Setting  (30 sec default) ***
  - One or more baackeends
      - instance group
      - balancing mode
      - capacity scaler

# HTTP(S) Load Balancing
  - Target HTTP(S) proxy
  - one signed SSL certificate installed (min)
      - up to 15 SSL certs per target proxy
  - Client SSL session terminates at load balancer
  - Support the QUIC transport layer protocol

# Backend buckets 
  - HTTPS load blancers uses URL Map to cloud storage bucket 

# Network Endpoint Group (NEG)
  - config object that specifies grou of backent endpoints / services
  - 4 types of NEGs
      - Zonal 
      - Internet - single endpoint outside of GCP 
      - Serverless - points to: 
              - CloudRun 
              - AppEngin
              - CloudFunction
      - Hybrid connectivity - Traffic Connector services outside of GCP


## Cloud CND
## SSL Proxy / TCP Proxy Load Balancing
## Network Load Balncing
## Internal Load Balancing














.  
