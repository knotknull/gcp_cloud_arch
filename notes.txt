GCP Certified Professional Cloud Architect
---------------------------------
Channels > My Channels > GCP Cloud Architect
22 Hours
List of courses:
NOTE:  This course has been updated to 8 Video Courses / 26h 26m  
#############################################################################
## Google Cloud Platform Fundamentals - Core Infrastructure:
 ✓ Introducing Google Cloud Platform
 ✓ Resources and Access in the Cloud
 ✓ Virtual Machines and Networks in the Cloud
 ✓ Storage in the Cloud
 ✓ Containers in the Cloud
 ✓ Applications in the Cloud
 ✓ Developing and Deploying in the Cloud
 ✓ Logging and Monitoring in the Cloud
 ✓ Course Summary

#############################################################################
## Essential Cloud Infrastructure: Foundation
 - Introduction
 - Interacting with Google Cloud
 - Virtual Networks
 - Virtual Machines 
 - Course Resources

#############################################################################
## Essential Google Cloud Infrastructure: Core Services
 - Introduction
 - Identity and Access Management (IAM)
 - Storage and Database Services
 - Resource Management
 - Resource Monitoring
 - Course Resources

#############################################################################
## Essential Google Cloud Infrastructure: Scaling and Automation
 - Introduction
 - Interconnecting Networks 
 - Load Balancing and Autoscaling
 - Infrastructure Automation
 - Managed Services
 - Course Resources

#############################################################################
## Reliable Google Cloud Infrastructure: Design and Process
 - Introduction
 - Defining Services
 - Microservice Design and Architecture
 - DevOps Automation
 - Choosing Storage Solutions
 - Google Cloud and Hybrid Network Architecture
 - Deploying Applications to Google Cloud
 - Designing Reliable Systems
 - Security
 - Maintenance and Monitoring
 - Course Resources

#############################################################################
## Getting Started with Google Kubernetes Engine 
 - Introduction
 - Introduction to Google Cloud
 - Introduction to Containers and Kubernetes
 - Kubernetes Architecture

#############################################################################
## Logging, Monitoring and Observability in Google Cloud
 - Introduction
 - Introduction to Monitoring in Google CLoud
 - Avoiding Customer Pain
 - Alerting Policies
 - Monitoring Critical Systems
 - Configuring Google Cloud Services for Observability
 - Advanced Loging and Analysis
 - Monitoring Network Security and Audit Logs
 - Managing Incidents
 - Investigating Application Performance Issues
 - Optimize the Costs of Monitoring
 - Course Resources

#############################################################################
## Preparing for the Professional Cloud Architect Exam
 - Welcome to Preparing for the Professional Cloud Architect Exam
 - Sample Case Studies 
 - Designing and Implementing
 - Optimizing and Operating
 - Resources and next steps
 - Course Resources



## Links
########################### 
- Professional Cloud Architect 
https://cloud.google.com/certification/cloud-architect

- Professional Cloud Architect Exam Guide
https://cloud.google.com/certification/guides/professional-cloud-architect/

- Professional Cloud Architect Sample Questions
https://cloud.google.com/certification/practice-exam/cloud-architect

- Certification Prep: Professional Cloud Architect
https://cloudonair.withgoogle.com/events/next20-studyjam/watch?talk=w3-talk-4

- Official Google Cloud Professional Cloud Architect Study Guid3e
https://cloudonair.withgoogle.com/events/next20-studyjam/resources

- GCP Free Tier
https://cloud.google.com/free/

- Google Cloud Documentation, ongoing review
https://cloud.google.com/docs/

- Getting Started: Create and Mange Cloud Resources, Skill Badge
https://google.qwiklabs.com/quests/120

- Foundational Infrastructure Tasks, Skill Badge
https://google.qwiklabs.com/quests/118

- Setup and Configure Cloud Environments Skill Badge
https://www.qwiklabs.com/quests/119

- Deploy and Manage Cloud Environments Skill Badge
https://google.qwiklabs.com/quests/121

- Professional Cloud Architecture Sample Questions
https://cloud.google.com/certification/guides/professional-cloud-architect/





##~~ ----------------------------  NEW NOTES START HERE  ---------------------------- ~~##

##########################################################################
## Google Cloud Platform Fundamentals - Core Infrastructure: 
##########################################################################

############################################
## Introducing Google Cloud 
  Cloud Waves
    - First  Wave: Colocation
    - Second Wave: Virtualized Data Center
    - Third  Wave: Container-based architecture

## Iaas / PaaS / SaaS 
  IaaS:  Infrastructure As A Service 
    - pay for what they allocate

  PaaS:  Platform As A Service 
    - pay for what they use

  Serverless: 
    - concentrate on code / not managing infrastructure 
      - Cloud Functions
      - Cloud Run: deploy containerized microservice in fully managed environment

  SaaS:  Software as a Service
        - Gmail, Docs, Drive

## Google Cloud Network
  100+ content caching nodes worldwide
  5 Major GeoLocations: N. America, S. America, EU, Asia, Australia

  Location > Regions > Zones
  London:
    Europe -> europe-west2 -> europe-west2-a  
                              europe-west2-b
                              europe-west2-c
  multi-region support:
    Cloud Storage -> Europe -> London / Belgium 
        Stores in multiple regions, redundantly in 2 geolocations 160km apart

  ** 103 Zones
  ** 34 Regions
  cloud.google.com/about/locations

## Security
  - Hardware infrastructure
  - Service deployment:  encrypted RPC
  - User Identtity 
  - Storage Services: encryption at rest
  - Internet Communication :   Google Front End  
                               Denial of Service Proection
  - Operational Security   :   Intrusion Detection
                               Reducing insider risk
                               Universal Second Factor (U2F) 
                               Software Dev Practices

## Open Source Ecosystem
  - Open Sources Licenses key technology i.e. Tensor Flow

## Pricing and Billing
  - Per second billing
  - Compute Engine:  sustained-use discounts
    - discount for more thatn 25% of month

  - Budgets
      assigned at billing account or project level
  - Alerts 
  - Reports 
  - Quotas (on resource @ project level)
    - rate quota      :  Rests after a specific time
    - allocation quota:  number of resources in a project
            ex.  5 VPC networks
cloud.google.com/products/calculator


############################################
## Resources and Access in the Cloud

# Google Cloud Resource Heirarchy  ( Org > Folder > Project > Resource )
    Organization Node
      |
       ->Folder  
           |
           |--------------------|
           |                    |
           -> Project            -> Project
                 |                    |              
                 -> Resources         -> Resources

Policies can be applied at Project / Folder / Organization level as well as Resource
** NOTE: Policies inherited downward
        ex. Apply policy to folder, policy is inherited by Project

- Projects 
  - Separate entities under Org Node
  - Projects hold resources
      ** NOTE: RESOURCE CAN ONLY BELONG TO ONE PROJECT 
  - Projects can have different owners / users 
      - billed and managed separately


    Project ID                    Project Name          Project Number
    ----------                   ---------------        ---------------
 - Globally unique              - Not unique            - Globally unique
 - Assigned by Google Cloud *   - Chosen by user        - Assigned by GCP
 - Immutable after creation     - Mutable               - Immutable 


* = mutable during cration

Resource Manager Tool
 - API (RPC / REST) CRUD / List Projects 


- Folders
    - Assign policies to resources at granularity  
    - Folders can contain projects and other folders


- Organization Node (different roles)
  - Org Policy Administrator
  - Project Creator Role
  - Google Workspace Customer 
      - Projects will belong to Organization Node
  - Non-Google Workspace Customer 
      - Use Cloud Identity to create Orginization node


# Identity and Access Management

 - Apply policies: who can do what on which resources

who:  google account, google group, service account, cloud identity domain
can do what:  role 
    - role == collection of permissions

role / policy inherits downward:  folder -> project -> resources


** 3 Cloud IAM Role Types:
  - Basic:       Owner, Editor, Viewer, Billing Admin  (broad permissions)
  - Predefined:  Services offer predefined roles and where they can be used:
                  - Compute Engine >>   Instance Admin Role                 
  - Custom:      Least privileged model, more granular role
              i.e. Instance Operator:  get, list, start, stop   (No Create / Delete)

          NOTE:  Custom Roles can only be applied to Project or Organization Level


# Service Accounts

 Give permissions to a resource and NOT a person
  - named with email address
        PROJECT_NUMBER-compute@developer.gserviceaccount.com
        PROJECT_ID@appspot.gserviceaccount.com
  - use cryptographic keys (instead of passwords)

** NOTE: Service Accounts NEED TO BE MANAGED

Service Account is a resource
  - can have IAM Policies attached to it 
      i.e. Editor (read / write)  vs. Viewer (read)


# Cloud Identity 

  Tool for organizations to define policies and manage users and groups w/ Google Admin Console

 - Can log in and manage resources with existing Active Directory or LDAP systems
 - Google Admin Console can disable user accounts and remove from groups
 - Available in free / premium editions
 - Already available to Google Workspace customers in Google Admin Console


# Interacting with Google Cloud

4 Ways to Interact w/ GCP
  1. Cloud Console
  2. Cloud SDK / Cloud Shell
  3. APIs
  3. Cloud Console Mobile App


  - Console 
      - Web-based admin UI
      - Manage / Create projects
      - Access to GCP APIs
      - Access to Cloud Shell
         - temp VM w/ Google Cloud SDK installed


  - Cloud Shell / SDK 
      - CLI for Cloud Platform products and services
**        - gcloud:  Main CLI for Google Cloud
          - gsutil: CLI for Cloud Storage 
          - bq (BigQuery): CLI for Big Query 
    NOTE: Can install Cloud SDK on other computers, laptop, etc. 
          Available as a docker image
       Cloud Shell:  CLI access to resources from browser
              - debian based VM w/ persistent 5 GB home directory   
              - Cloud SDK utilities always installed 

  - APIs / REST
      - Programmatic acess to products and services 
          - Typically use JSON as interchange format
          - Use OAuth 2.0 for auth / auth

      - Enabled through the GCP Console
        NOTE: GCP Console can turn on / off APIs 
          
      - Most APIs include daily quoats and rates (limits) 
            - Can be raised by request
          
      - API Explorer
            - which APIs are available and which versions

Control GCP resource with client libraries:
    - Cloud Client Libraries
        - Community owned libraries 
    - Google API  Client Libraries
        - Open source, generated
        - Languages: Java, Python, C#, C++, JavaScript, PHP, .Net, Go, Node.js, Ruby, Objective-C, Dart


## Cloud Marketplace (formerly Cloud Launcher)
  - Solution marketplace containing pre-packaged, ready-to-deploy solutions
        - offered by Google and 3rd Party Vendors

  - Mobile App
      - Start, stop and use SSH to connect to Compute Engine instances and see logs
      - Start, stop Cloud SQL instances
      - Administer apps deployed on App Engine
      - Up-to-date billing info for projects & alerts
      - Graphs w/ key metrics
      - Alerts & indicent mgmt

cloud.google.com/console-app


############################################## 
## Virtual Machines and Networks in the Cloud


## Virtual Private Cloud Networking

VPC:  secure, individual, private cloud-computing model hosted within public cloud

  - Each VPC network contained in a GCP Project
  - Connect resources to each other and internet 
      - segment networks
      - firewall rules
      - static routes

NOTE: VPC Networks have GLOBAL scope
      - subnets in any region
      - subnets can span zones that make up region

Size of subnet can be increased by expanding range of IP Address


┌──────────────────────────────────────────MyVPC───────────────────────────────────────────┐
│                                                                                          │
│    ┌─────────────────────────────────────us-east-1───────────────────────────────┐       │
│    │                                                                             │       │
│    │                  ┌────us-east-1b────┐        ┌────────us-east-1c──────┐     │       │
│    │   ┌────────────┐ │                  │        │                        │     │       │
│    │   │my-subnet-1 ├─┼──────────────────┼────────┼────────────────────────┤     │       │
│    │   └────────────┘ │                  │        │                        │     │       │
│    │ 10.0.0.0/24      │       [VM]       │        │          [VM]          │     │       │
│    │                  │                  │        │                        │     │       │
│    │                  └──────────────────┘        └────────────────────────┘     │       │
│    │                        10.0.0.2                         10.0.0.3            │       │
│    │                                                                             │       │
│    └─────────────────────────────────────────────────────────────────────────────┘       │
│                                                                                          │
└──────────────────────────────────────────────────────────────────────────────────────────┘

NOTE: - VPCs are Global 
      - subnets can span zones that make up a region 
      - can dynamically change range of IP address in subnet (does not effect provisioned VMs)


## Compute Engine

- Run VMs on GCP
- Create with:
  - GCP Console
  - gcloud CLI
- Run Linux / Windows Server
- Can create custom VM
- Pick GPU

Persistent storage:
  - Standard
  - SSD
     - Local SSD for scratch space (ephemeral storage)

- Define startup script & meta data
- snapshot of VM disks

Cloud Market Place:
  - pre-configured VMs with software, storage, etc. configured

Pricing :
- per second billing / 1 minute minimum
- sustained use discounts  / > 25% per month
- committed use discounts
- Preemptible instances & Spot VM
- High throughput to storate / no extra cost
- Custom machine types:
    - only pay for hardware needed


## Scaling
Scale Up / Out 
  - Autoscaling

Scale Up: 128 CPUs / 1024 GB
  - Max CPUs per VM tied to Family 
  - Constrained by user quota

cloud.google.com/compute/docs/machine-types

## VPC Compatabilities 

VPC have routing tables
  - built-in
  - forward traffic within network
      - across subnets
      - between GCP zones
      - no external IP address required

VPC provide global distributed firewall
  - firewall rules via metadata tags on compute engine instance
     i.e. traffic for 80 / 443 can route to compute engines tagged with "web"

VPC belongs to Project
  - VPC Peering allows traffic between two VPCs in different projects
  - Shared VPC: utilize IAM to control what is shared between VPCs




## Cloud Load Balancing
  - Fully distributed, software-defined, managed servcie
  - HTTP / HTTPS / TCP / SSL / UDP
  - single anycast IP fronts all backend instances
  - traffic goes over Google backbone
  - Cross region load balancing
  - Multi-region fail over
  - No "Pre-Warming"




Google VPC Load Balancing Options

Global            Global            Global TCP          Regional           Regional 
HTTP(S)           SSL Pooxy         Proxy                                   Internal
---------------   ----------------  -------------       ---------------     ----------------
Layer 7 load      Layer 4 load      Layer 4 load       Load balancing       Load balancing  
balancing based   balancing of      balancing of        of any traffic      of traffic 
on load           non-HTTPS SSL     non-SSL TCP         ( TCP, UDP)         inside a VPC
                  traffic based on  Traffic
                  load
---------------   ----------------  -------------       ---------------     ----------------
Can route           Supported on    Supported on        Supported on any    Use for the 
different URLS to   specific port   specific port       port number         inerntal tiers
different back      numbers         numbers                                 of multi-tier 
ends                                                                        applications



## Cloud DNS / CDN
Cloud DNS:  8.8.8.8
  - manage via Console, gloud CLI and RESTful API


Cloud CDN 
  - Global edge caches
  - CDN Interconnect: use another cloud provider CDN


## Connecting Networks  
Connection Options:

IPsec VPN :  multi-Gbps over VPN tunnels
    - uses Cloud Router 
    - exchange route info (VPC, other networks) using Border Gateway Protocol

Direct  Peering:  Private  connection between you and google 
    - puts router in same public datacenter as Google Point of Presence (PoP)
    - ** 100 Points of Presence around world

Carrier Peering:  connection thru largest partner netowrk
    - direct access from on-premise network thru service provider network
    - NOTE: Not covered by Google SLA

Dedicated Interconnect:  N x 10G Transport circuit
    - 1 or more direct, private connections to Google
    - Covered by up to 99.99% SLA
    - Can be backed by VPN

Partner Interconnect:  
    - From On-Prem to VPC via Service Provider
    - Data center in a location that can't be reached by Dedicated Interconnect 
    - Useful for < 10GB/sec conneciton
    - Can be covered by up to 99.99% SLA




####################################### 
## Storage in the Cloud

## Cloud Storage
  - binary large object storage + meta data
    - high performance 
    - simple admin / no capacity management
 - key is URL to storage
 - not a file system
      - online content
          - video, pictures, audio
      - backup  / archiving
      - store intermediate results
 - made of buckets
 - Objects are Immutable
    - new version for changes
    - Can turn on object versioning

 - Data encrypted at rest / encrypted in transit via HTTPS

  Buckets:
    - globally unique name
  - specify geographic area where stored


  - IAM Policies / Access Control Lists

        IAM:  Inherited from project to bucket to object ( project > bucket > object )
        ACL:  Scope + permissions


Lifecycle management policies 
  - i.e. delete objects older than 365 days
         3 most recent versions


## Cloud Storage Classes
 - Standard Storage: hot data:  99.95 / 99.90 SLA
 - Nearline Storage: infrequently accessed data (1x per month) / SLA 99.0
 - Coldline Storage: infrequently accessed data (1x per 90 days) / SLA 99.0
 - Archive Storage : infrequently accessed data (1x per year )

common characteristics:
  - unlimited storeage (no min obj size)
  - worldwide accessibility and locations
  - low latency / high durability
  - geo- redundancy
   - Data encrypted at rest on server / encrypted in transit via HTTPS



Data Ingress:
  Online Transfer:  
      -   CLI or drag/drop

  Storage Transfer Service: 
      -  scheduled managed batch service

  Transfer Appliance: 
      - rackable appliances to ship data
      - 1 PB of data

Data Services:

  Big Query: 
      - import / export tables

  App Engine: 
      - logs, backups, object storage 

  Cloud SQL : 
      - import / export tables

  Compute Engine: 
      - startup scripts, images, object storage


gsutil:  Google Storage CLI Utility


## Cloud SQL 
  - Fully managed RDBMS (DBaaS) 
      - MySQL 
      - PosgreSQL Beta 
      - SQL Server
  - Transactions
  - TBs of data
  - Provide replica services: read, failover, etc
  - managed backups (on demand, scheduled)
  - vertical   scaling (read / write)
  - horizontal scaling (read)

**  64 processor cores
** 400 GB RAM
**  30 TB Storage

- automatic replicatin
- managed backups, covers 7 backups
- encrypts data
- includes network firewall
- Accessible by other Google Cloud services


## Cloud Spanner 
  - horizontally scalable RDBMS 
  - strong global consistency 
  - managed services w/ HA
  - SQL queries
  - Automatic replication
  - DBs > 2 TB
  - PetaBytes capacity
  - High number of IOPS


## Fire Store 
  - horizontally scalable NoSQL DB 
   -  Documents and COllections
  - NoSQL queries
  - index by default
  - transaction support
  - atomic batch operations
  - strong consistency
  - automatic mult-region data replication
  - charged for CRUD operations and data amount
  - free daily quota **
    - 50k document reads
    - 20k document writes
    - 20k document deletes
    - 1 GB stored data


## Cloud Bigtable 
  - Fully managed NoSQL / scalable
  - wide-column database 
  - terabyte apps
  - sparsely populated columns
    - billions of rows 
    - thousands of columns
  - single lookup key / persistent hash table
  - low latency, high throughput: read and write
  - > 1TB semi-structured data
  - Data fast / high throughput / rapidly changing
  - data is timeseries
  - Machine Learning

Accessed vy HBase API
   - Natively compatible w/ big data / Hadoop ecosystems

Data encrypted in-flight / at rest
   -Control access via IAM

Bigtable powers:  Google Analytics, GMail, Search

Access Patterns:
  - API      :   HBase Client
  - Streaming:   via Cloud Dataflow Streaming, Spark Streaming, Storm
  - Batch    :   Read / write data via MapReduce, Dataflow, Spark 




gsutil:  Google Storage CLI Utility




                Firestore                   Bigtable              Cloud                 Cloud                 Cloud                   Big
                                                                  Storage               SQL                   Spanner                 Query

Type            NoSQL                     NoSQL               Blobstore             Relational            Relational              Relational
                Document                  Wide column                               SQL for OLTP          SQL for OLTP            SQL for OLTP

Transactions     Yes                     Single-row            No                      Yes                  Yes                   No 

Complex Queries  No                       No                   No                      Yes                  Yes                   Yes 

Capacity         TB+                      PB+                  PB+                     30 TB                PB                    PB+ 

Unit size       1 MB/entity         10MB/Cell, 100MB/row       5TB/Object        Determined by engine       10,240MB/row         10 MB/row

Best For    semi-strcutred          flat data, heavy r/w      binary, object      web frameworks          large scale db (>2TB)   interacitve querying
            durable key-value         analytical data

Use Cases    App Engine Apps        AdTech, IoT data        Images, media         user creds              high I/O                data warehousing 
                                      Financial               backups             customer orders         global consistency      




NOTE: env variable $DEVSHELL_PROJECT_ID contains unique project id.


ex. gsutil ls gs://$DEVSHELL_PROJECT_ID


####################################### 
## Containers in the Cloud

 - Independent workload scalability
 - OS and hardware abstraction layer

OS is virtualized 
 - code and dependencies in a container
 - limited access to own file system / hardware
 - scales like PaaS but flexible like IaaS

## Kubernetes 
 - GKE (Google Kubernetes Engine) -> Kubernetes
 - platform for managing containerized workloads / services
 - scale up / down/ rollout / rollback 
 - APIs to deploy containers to set of nodes (called a cluster)
 - Components run control plane and nodes run containers

 - pod: smallest unit in kubernetes to create / deploy
   - represents a running process

Usually one container per pod
  - multiple containers can share a pod to share resources, etc.

NOTE: use kubectl to interact with kubernetes
Deployment can run part a component of an application or an entire application 

list of running pods
> kubectl get pods

this is a deployed local Load Balancer
> kubectl expose deployments nginx -- port=80 --type=LoadBalancer

Services is an abstraction, defines logical set of pods and abstraction
> kubectl get services


Services is an abstraction, defines logical set of pods and abstraction
  - increase pods when CPU utilization has increased
> kubectl scale

Update new version of app
> kubectl rollout


## Google Kubernetes Engine (GKE)
- managed kubernetes in cloud
  Compute Engine instances into a Cluster

 - Created by console or g-cloud command
 - deploy / manage applications 
 - perform admin tasks
 - setup Policies
 - Monitor workload

# Advanced cluster management features
 - load balancing for Compute Engine instances
 - Node pools to designate subsets of nodes within cluster
 - Auto scaling / upgrades
 - Auto reapir
 - Logging Monitoring


> gcloud container clusters create k1


## Hybrid and multi-cloud

 - move parts of processing to cloud while keeping rest on premise


## Anthos

 - hybrid and multi-cloud solution
 - framework rests on kubernetes and GKE on-prem
 - tools for monitoring and maintaining
    - on prem, in cloud, multi-cloud

 - GKE on-prem
    - turnkey, production grade version of Kubernetes
    - service mesgh (Anthos, Istio)
    - single pane of glass dashboard for entire environment




┌─────────────────────────────────────────────────────────────────┐                         ┌───────────────────────────────────────────────────────────────┐
│                                                                 │                         │                                                               │
│ Google Cloud                                                    │                         │  On-Premise Data Center                                       │
│                                                                 │                         │                                                               │
│      ┌────────────────────┐                                     │                         │                                                               │
│      │ GKE Dashboard      │                                     │                         │                                   ┌────────────────────┐      │
│      │ Centralized UI     │                                     │                         │                                   │                    │      │
│      │                    │                                     │                         │                                   │  Policy Repository │      │
│      └────────────────────┘                                     │           ┌─────────────┼──────────────────────────────────►│  Store Policy      │      │
│                                                                 │           │             │                                   │   (git)            │      │
│                                                                 │           │             │                                   └─────────────────┬──┘      │
│                ┌────────────────────────────────────────────────┼───────────|             │                                                     │         │
│                │                                                │           │             │                                                     │         │
│   ┌────────────┼─────────────────────────────────────────────┐  │           │             │    ┌────────────────────────────────────────────────┼───────┐ │
│   │            │                                             │  │           │             │    │                                                │       │ │
│   │  ┌─────────▼──────────┐       ┌──────────────────────┐   │  │   ┌───────┴────────┐    │    │    ┌──────────────────────┐    ┌───────────────▼────┐  │ │
│   │  │ Anthos Config      │       │                      │   │  │   │ Cloud          │    │    │    │                      │    │ Anthos Config      │  │ │
│   │  │ Management         │       │ Anthos Service Mesh  ◄───┼──┼───┤ Interconnect   ├────┼────┼────► Istio Service Mesh   │    │ Management         │  │ │
│   │  │ Sync Policy        │       │                      │   │  │   │                │    │    │    │    Open Source       │    │ Sync Policy        │  │ │
│   │  │                    │       └──────────────────────┘   │  │   └────────────────┘    │    │    └──────────────────────┘    │                    │  │ │
│   │  └────────────────────┘                                  │  │                         │    │                                └─────────┬──────────┘  │ │
│   │                                                          │  │                         │    │                                          │             │ │
│   │    ┌────────────────────────────────────────────┐        │  │                         │    │       ┌──────────────────────────────────▼───────┐     │ │
│   │    │                                            │        │  │    ┌────────────────┐   │    │       │                                          │     │ │
│   │    │     Google Kubernetes Engine               │        │  │    │ Cloud          │   │    │       │    GKE On-Premises                       │     │ │
│   │    │                                            │◄───────┼──┼────┤ Marketplace    ├───┼────┼──────►│                                          │     │ │
│   │    │                                            │        │  │    │ 3rd Party Int  │   │    │       │                                          │     │ │
│   │    └────────────────────┬───────────────────────┘        │  │    └────────────────┘   │    │       └──────────────────────────────────────────┘     │ │
│   │                         │                                │  │                         │    │                                                        │ │
│   └─────────────────────────┼────────────────────────────────┘  │                         │    └────────────────────────────────────────────────────────┘ │
│                             │                                   │                         │                                                               │
└─────────────────────────────┼───────────────────────────────────┘                         └─────────────────────────────────┼─────────────────────────────┘
                              │                                                                                               │
                              │                                                                                               │
                              │                                   ┌───────────────────────────┐                               │
                              │                                   │    Operations             │                               │
                              └──────────────────────────────────►│  Logging & Monitoring     │ ◄─────────────────────────────┘
                                                                  └───────────────────────────┘


cloud.google.com/anthos


####################################### 
## Applications in the Cloud


## App Engine
 - Fully managed, serverless platform for developing / hosting web applications at scale
  app engine -> [languages, libraries, frameworks] -> servers (no servers to provision)

 Eclipse, IntelliJ, Maven Git, Jenkins, PyCharm

Built-in Services & APIs  
  - NoSQL datastore     - Health Checks
  - Memcache            - Applicaton Logging
  - Load balancing      - User Auth API 

SDK: 
  - APIs and libraries
  - Sandbox environment
  - Deployment tools
        - SDK manages app locally, Google Cloud Console manages in production

Cloud Console:
   - Create new apps
   - Configure domain names
   - Change which verson is live
   - Review access and error logs
   - Security Command Center scans for vulnerabilities


## App Engine Environments
 Standard vs. Flexible

  - Standard:
      - container instances running on Google infrastructure 
      - pre-configured runtime with standardized list of languages 
        - Persistent storage w/ queries, sorting, transactions
        - Automatic scaling and load balancing
        - Asynchronous task queues for performing work outside of scope of request
        - Scheduled tasks for triggering events at specific times / intervals
        - Integration with Google Cloud Services and APIs
    Requirements:
      - Use specificed versions of Java, Python, PHP, Go, Node.js and Ruby
      - Apps must conform to sandbox constraints, dependent on runtime


  - Flexible:
      -  Docker containers on Compute Engine VMs
      -  App Engine runs Compute Engines
         - instances health-checked, healed, co-located 
         - Critical, backward-compatible updates are automatically applied to underlying OS
         - VM instances are automatically located by geographic region according to project settings
         - VM instances are restarted on weekly basis

      -  Supports
          - Microservices                       - Search
          - Authorization                       - Versioning
          - SQL & NoSQL databases               - Security Scanning
          - Traffic splitting                   - Memcache
          - Logging                             - Contend Delivery Networks

      -  Customize runtime and OS:  Python, Java, Go, Node.js, PHP, .Net and Ruby
      -  Provide custom Docker Image / Docker FIle


                                    Standard Env                          Flexible Env
                                    -------------                         ------------
Instance startup                    Seconds                                 Minutes
SSH access                          No                                      Yes (not default)
Write to local disk                 No (some read/write to /tmp)            Yes, ephemeral (disk initialized on VM startup)
Support for 3rd-party binaries      Certain languages                       Yes
Network access                      via App Engine services                 Yes
Pricing Models                      After free tier, pay per instances      Pay for resource allocation per hour, no auto shutdown
                                    class w/ auto shutdown



App Engine vs. GKE ??

App Engine: give environment max control on deployment and scaling
GKE : give app owner full flex of kubernetes

App Engine Standard   <-> App Engine Flexible  <-> GKE

## Google Cloud API Management

  Cloud Endpoints  <-->  API  <--> Apigee Edge
   - management tools for Google's API

  Cloud Endpoints: 
    - Distributed API management system 
    - Provide API console, hosting logging, monitoring and other features
    - Use with any APIs that support the OpenApi Spec
    - Supports apps running in App Engine, GKE, Compute Engine
    - Clients:  Android, iOS, Javascript


  Apigee Edge: 
    - specific focus on business problems, like rate limiting, quotas and analytics
    - backend services for Apigee Edge don't need to be in Google Cloud

## Cloud Run  (think Lambda)
 - Managed compute platform that can run stateless containers 
      via web requests / pub-sub events
 - Serverless
 - Built on Knative, an open API and runtime environment built on Kubernetes
      Note: Knative let's you run on Cloud Run or GKE
 - Automatically scale up and down from zero almost instantaneously
      - charges only for resources used, nearest 100ms

  container-based workflow:
    1. write code
          - app should start server that listens for web requests
    2. build and package container image
    3. Push image to Artifact Registry
            https: URL returned back

  NOTE: Cloud Run then starts your container on demand to handle requests.
        All incoming requests are handled by dynamically adding and removing containers.


  source-based workflow:
    1. write and deploy code
    2. Buildpacks builds and packages to container 


Application is exposted on a sub-domain of ***.run.app domain or use own custom domain

Cloud Run handles:
  - creating SSL certificate
  - configuring SSL termination w/ secure settings
  - handling incoming requests, decrypting and handing off to app

       https://***.run.app     +-----------------------------------------------------+
       https://your.domain     |                 Cloud Run                           | 
client  -------HTTPS----->     |  [Cloud Run Proxy]  ---HTTP--->  [ App Container]   | 
                               |                                                     | 
                               +-----------------------------------------------------+

Charged only when handling web requests within 100ms, start up and shutdown
  NOTE:  small fee for every 1MM requests served


- Charges increase w/ CPU and Memory
- Cloud Run can allocate 4 vCPU and 8GB memory

Cloud Run can run any binary that is Linux 64 bit
  - Java        - PHP
  - Python      - Go
  - Node.js     - C++
  - COBOL       - Haskell
  - Perl       


## Developing and Deploying in the Cloud
## 

# Cloud Source Repositories 
 - full featured git repos hosted on cloud
    - App Engine, Compute Engine
 - can have unlimited number of private git repos
 - Diagnostic Tools:  Debugger, Error Reporting can run against git repos
 - can source from GitHub, BitBucket


# Cloud Functions
 - Lightwight, event-based, asynchronous compute solutions
 - create small, simple purpose functions that respond to cloud events 
   without the need to manage a server or a runtime environment
 - construct application workflows 
 - extend cloud services
 - billed to nearest 100ms, only when code is running
 - Written in:
  - Javascript (Node.js)
  - Python
  - Go
 - Executed in a managed Node.js env on Google Cloud
 - Asynchronous:  Events from Cloud Storage and Pub/Sub
 - Synchronous :  HTTP Invocation for synchronous execution

# Deployment: Infrastructure as Code
# Terraform
  - Create template using HashiCorp Config Language (HCL)
  - Terraform uses template to determine actions to create environment
  - Use Terraform to update env to match change in code
  - Store / version control templates in Cloud Source Repositories


## Logging and Monitoring in the Cloud
## 

Four Golden Signals (measuring performance/reliability)
 1. Latency
 2. Traffic
 3. Saturation
 4. Errors


# Latency: how long to return result
 - page load latency              - number of requests waiting for thread
 - query duration                 - service response time
 - transaction duration           - time for first response
 - time to complete data return


# Traffic:  how many requests reaching system 
 - http requests / sec            - requests for static vs. dynamic content
 - Network I/O                    - # concurrent sessions
 - # transactions per second      - # of retrievals per second
 - # of active requests           - # of write ops
 - # of read ops                  - # of active connections


# Saturation:  How close to capacity a system is
 - % memory utilization           - % thread pool utilization
 - % cache utilization            - % disk utilization
 - % CPU utilization              - disk quota
 - memory quota                   - # of available connections
 - # of users on the system 

# Errors:  System failure events
 - 400/500 HTTP codes             - Wrong answers / incorrect content  
 - # failed requests              - # exceptions
 - # stack traces                 - Servers that fail liveness checks
 - # of dropped connections

# SLI, SLO, SLA

Service Level Indicator:  selected monitoring metrics that measures one aspect of service reliability
              ratio of 2 numbers:  # of Good Events / Count all Valid Events

Service Level Objective:  combines SLI with target reliability  (generally short of 100%)
              ex.  99.9%
              S - Specific 
              M - Measured
              A - Achievable
              R - Relevant
              T - Time bound

Service Level Agreement:  commitments made to customers that your systems and apps will have only a certain amount of down time.
      - minimum level of service promised
      - what happens when promise is broken

# Integrated Observability Tools


- Dashboards
- Metrics Explorer
- Logs Explorer
- Service Monitoring 
- Health Checks
- Debugger
- Profiler

## Monitoring Tools

> 1000 streams of metrics data

# Cloud Monitoring: overall health of apps 
collects: metrics, events, metadata, logs, services, systems, agents, custom code, and 
          various common app components:
              - Cassandra, Nginx, Apache, Elasticsearch, others

## Logging Tool

# Cloud Logging: 
  - collect     - store
  - search      - analyze
  - monitor     - alert

Log Analysis:
 - Logs Explorer 
 - BigQuery allows querying of log data
 - Archived logs to Cloud Storage

Log Export:
 - exported to Cloud Storage
 - exported as messages to Pub/Sub
 - exported into BigQuery tables
 - exported into BigQuery tables

Log Retention:
  - dependent on type
  - Data access logs, default = 30 days, max of 3650 days
  - Admin logs stored default = 400
  - exported to cloud storage or big query to exend retention 

Log Types:
  - Cloud Audit Logs
      - who, what where
      - admin activity
      - dat access 
      - system events
      - transparency

  - Agent Logs
      - fluentd agent

  - Network Logs
      - VPC flow
      - firewall rules
      - NAT gateway

  - Service Logs
      - Standard out / err


## Error Reporting / Debugging
# Error Reporting 
  -  counts, analyzes, aggregates crashes in running cloud services
  -  interface w/ sorting / filtering capabilities
  -  dedicated view: time chart, occurances, first / last seen, etc.

# Debugging
  -  Debug while running in prod
  -  collaborate debug session w/ Console URL
  -  snapshot: production state captured at specific line
  -  integrates into existing dev workflows
  -  integrates w/:  Cloud Source Repo, GitHub, Bitbucket,  GitLab

# Cloud Trace
  -  collects latency data from distributed apps in Google Cloud Console
        - App Engine, Compute Engine VMs, Kubernetes Engine containers
  -  generate latency reports

# Cloud Profiler
  -  CPU and heap picture of app
  -  analyze anywhere: Google Cloud, other clouds, on-prem
        -  supports Java, Go, Python, Node.js
  -  resource consumption via flame graph


## Summary / review
## 

cloud.google.com/training
cloud.google.com/certifications




##########################################################################
## Essential Cloud Infrastructure: Foundation 
##########################################################################

############################################
## Introducing Google Cloud 

## GCP: 
 - infrastructure
 - platform
 - software


<--------------------------   Google Cloud Products and Services  -------------------------->   
Iaas                                     PaaS                                            SaaS

CPUs, Memory                 Servers                         Clusters              Serverless
Disks, Interfaces           VM Instances                Cluster Management        Autoscaling

IT Ops                  Sys Ops              Dev Ops               Low Ops             No Ops




## Compute Services

- Compute Engine : IaaS
- Google Kubernetes Engine (GKE) :  Google managed container environment
- App Engine     :  Fully Managed PaaS.  Run apps w/ infrastructure managed by Google
- Cloud Functions:  Functions as a Services.  Serverless execution env.
- Cloud Run      :  Stateless containers via web request or Pub / Sub events (Serverless, KNative)
                        can run on google cloud or GKE, resources calculated to 100ms




############################################
## Interacting with Google Cloud

## Module Overview

# Interacting w/ GCP
  - Google Cloud Platform Console (Web UI):  console.cloud.google.com
  - Cloud Shell and Cloud SDK (CLI)       : ex.  > gcloud compute instances list
                  cloud shell:  browser based shell, temporary VM + 5 GB persistent disk + Cloud SDK
  - REST-base API (custom apps)
  - Cloud Mobile App (iOS / Android)
          - manage vms, db instances, App Engine apps, billing, etc.

# Client libraries / API Interfaces

 - Google Cloud SDK:  gcloud, gsutil, bq
 - RESTful API:  get, post, put, delete   <-->  JSON
 - Google Cloud Client Libraries:   Java, Python, Node.js, Ruby, Go, PHP

Cloud Shell: 
  - gcloud : Compute Engine + Google Cloud Services
  - gsutil : Cloud Storage
  - kubectl: GKE + Kubernetes
  - bq     : Big Query



## list gcloud regions
gcloud compute regions list

## Projects

> New Project > Name > [reate]

- projects can be "shutdown"
    - stopping services and billing
    - deletion gets scheduled to happen in the future to allow "undo" 
    
switching project contexts in cloud shell

> gcloud config list          # List current project
> gcloud config set project   # Set project context 


############################################
## Virtual Networks

## Virtual Private Cloud (VPC)
  - Software Defined Network

VPC Objects:
- Projects                  - IP Addresses
- Networks                      - Internal, External, range
    - Default, auto mode    - Virtual Machines (VMs)
      custom mode
- Subnetworks               - Routes
- Regoins                   - Firewall rules
- Zones

# Projects  
 - Associates objects and services w/ billing
 - Contains networks (up to 5) that can be shared / peered

# Network
 - No IP address range
 - Global and spans all regions
 - contains subnetworks
 - available as: default, auto, custom


# VPC Network Types
default:
  - every project 
  - one subnet per region 
  - default firewall rules

auto mode:
  - default network 
  - one subnet per region 
  - Regional IP allocation
  - Fixed /20 subnetwork per region
  - Expandable to /16

custom mode:
  - no default subnets created 
  - Full control of IP ranges
  - Regional IP allocation
  - Expandable to IP ranges you specify


10.128.0.0/9 CIDR


                              +-------------------------------------------->[Internet]
Networks isolate systems      |                              + ------------------^
Project                       |                              |
Network #1      Network #2    |  Network #3      Network #4  |  Network #5      Regions
  [A]                         +->  [C]              [D]   <--+                 us_east1
   |                                                                           us-central1
   |                                                                           us-west
  [B]                                                                          europe-west1
                                                                               asia-east1

A and B can communicate though internal IPs
C and D can communicate though external IPs

 - VPC is global

┌──────────────────────┐             ┌────────────────────────────────────────────────────────────────────────────────────────────┐
│     On Premises      │             │                                                                                            │
│                      │             │                                                                     Cloud VPC Network      │
│                      │────────────────────────────> ┌────────────────┐                                                          │
│                      │             │                │  VPN           ├────────────────────────────────┐                         │
└──────────────────────┘             │                │  Gateway       │                                │                         │
                                     │       ┌────────┴──────┬─────────┴───────┐       ┌────────────────┼────────────────┐        │
                                     │       │               │                 │       │                │                │        │
                                     │       │               │                 │       │                │                │        │
                                     │       │      ┌────────▼─────────┐       │       │      ┌─────────▼────────┐       │        │
                                     │       │      │                  │       │       │      │                  │       │        │
                                     │       │      │   VM             │       │       │      │  VM              │       │        │
                                     │       │      │   Compute Engine │       │       │      │  Compute Engine  │       │        │
                                     │       │      │                  │       │       │      │                  │       │        │
                                     │       │      └──────────────────┘       │       │      └──────────────────┘       │        │
                                     │       │                                 │       │                                 │        │
                                     │       │         Subnet                  │       │         Subnet                  │        │
                                     │       │         10.10.0.0/26            │       │         10.50.0.0/26            │        │
                                     │       │         us-west1                │       │         us-east1                │        │
                                     │       │                                 │       │                                 │        │
                                     │       └─────────────────────────────────┘       └─────────────────────────────────┘        │
                                     │                                                                                            │
                                     └────────────────────────────────────────────────────────────────────────────────────────────┘

NOTE: On Prem can connect to different regions via VPN Gateway 



Subnetworks can cross zones within a region


┌───────────────────────────────────────Network 1─────────────────────────────────────┐
│                                                                                     │
│     ┌─────────────────────────────────Region 1───────────────────────────────┐      │
│     │                                                                        │      │
│     │                       ┌──────────────┐       ┌──────────────┐          │      │
│     │   ┌─────────┐         │    Zone A    │       │    Zone B    │          │      │
│     │   │subnet-1 │ ───▲────┼───────|──────────────┼───────┼─────────────────┼─     |
│     │   └────▲────┘    │    │     +───+    │       │    +────+    │          │      │
│     │        │         │    │     │VM │◄───┼───┐   │    │ VM │◄───┼─────┐    │      │
│     │        │         │    │     +───+    │   │   │    +────+    │     │    │      │
│     │        │         │    └──────────────┘   │   └──────────────┘     │    │      │
│     │        │         │                       │                        │    │      │
│     └────────┼─────────┼───────────────────────┼────────────────────────┼────┘      │
│              │         │                       │                        │           │
│              │         │                       │                        │           │
└──────────────┼─────────┼───────────────────────┼────────────────────────┼───────────┘
               │         │                       │                        │
               │         │                       │                        │
         10.0.0.0      10.0.0.1             10.0.0.2                 10.0.0.3
         Reserved     Reserved
        for Network   for Gateway

NOTE: VMs can be on same subnet but in differt Zones
 - single firewall rule can apply to both vms
 - .0 reserved for Network and .1 reserved for Gateway
 - reserved: second to last and last address (Broadcast Address)
 - EVERY subnet has 4 reserved IP Addresses in range


# Can expand subnets without re-creating 
 - increase network range of CIDR
    - can't overlab other subnets
    - IP range must be unique valid CIDR block
    - New subnet IP ranges have to fall within valid (Regional) IP ranges
    - can expand but NOT SHRINK
    - Auto Mode can expand from /20 to /16
    - Avoid large subnets


NOTE: To increase subnet size, make mask a LOWER NUMBER, 
  this increases the number of addresses in subnet

i.e.  change 10.0.0.0/29 to  10.0.0.0/26

## IP Addresses

- VM can have two IP addresses (internal external)
  Internal IP                               External IP
  -----------------------------------------------------------
- allocated from subnet range       - Assigned from pool
  to VMs by DHCP                      (ephemeral)
- DHCP lease renewed every 24 hrs   - Reserved (static) 
- VM name + IP is registered        - Bring Your Own IP address (BYOIP)
  with network-scoped DNS           - VM doesn't know external IP; it is mapped
                                      to the internal IP


** Limit of instances (IP Accr) per network 15K

NOTE: External IP Address is unknown to VM.


 - FQDN ==  [hostname].[zone].c.[project-id].internal
 - DHCP always points FQDN to internal IP
 - Name resolution handled by internal DNS resolver
      - each instance has meta data server which acts as DNS resolver
      - handles all DNS queries for local network resources
      - routes other resources to Google Pulic DNS Servicers
      - instances stores lookup table which matches External IP to Internal IP

 - DNS zones can be hosted using Cloud DNS
      - Google's DNS Services
      - Low Latency
      - high Availability
      - UI, command line, API

 - Alias IP Address
      - assign range of IP addresses as aliases to VM


                │
      VM        │
  Primary IP    │
    10.1.0.2    │
                │
┌───────────────v──────────────────┐
│               +------------+     │             ┌───────────────────────────────────────────┐
│              VM            |     │             │  Subnet:                                  │
│  ┌────────────────┐        +---->├─────────────┤  Primary   CIDR range 10.1.0.0/16         │
│  │   Containers   │              │             │                                           │
│  │  ┌─────────────┼──┐-----------├─────────────┤  Secondary CIDR range 10.2.0.0/20         │
│  └──┼─────────────┘  │           │             └───────────────────────────────────────────┘
│     │   ┌────────────┼───┐       │
│     └───┼────────────┘   │       │
│         │                │       │
│         └────────────────┘       │
│  VM alias IP Range: 10.2.1.0/24  │
│                                  │             
└──────────────────────────────────┘


# IP Address / Default Domains

- Google publishes the complete list of IP ranges that it announces to the internet in goog.json.
- Google also publishes a list of Google Cloud customer-usable global and regional external IP
    addresses ranges in cloud.json.

https://www.gstatic.com/ipranges/cloud.json:  provides a JSON representation of Cloud
    IP addresses organized by region.

https://www.gstatic.com/ipranges/cloud_geofeed: standard geofeed formatted IP
     geolocation file that we share with 3rd-party IP geo providers like Maxmind, Neustar,
     and IP2Location.

https://www.gstatic.com/ipranges/goog.json and https://www.gstatic.com/ipranges/goog.txt are TXT and JSON formatted files
    respectively that include Google public prefixes in CIDR notation.
NOTE: For more information as well as an example of how to use this information, refer to

https://cloud.google.com/vpc/docs/configure-private-google-access#ip-addr-defaults



## Routes and Firewall Rules

# Routes
- Every network has routes that let instances in a network send traffic to each other
- default route that directs packets to destinations outside the network  (gateway ??)
    - firewall rules must allow the packet

- routes map traffic to destination networks
- routes created when: 
    - network created
    - subnet  created
    - allows VMS on same netowrk to communicate

- Applies to traffic egressing  a VM
- Forward traffic to most specific route
- Destination is in CIDR Notation

NOTE: Traffic is delivered ONLY if it also matches a firewall rule

[VM Routing Table]
192.168.5.0/24
10.146.0.0/20
10.128.1.0/20
0.0.0.0/0


# Firewalls

- Firewall rules protect VM instances from unapproved connections
- VPC network functions as a distributed firewall
- Connections are allowed / denied at instance level
- ** Firewall rules are stateful
- Impled deny all ingress / allow all egress


Routes map traffic to destination networks
Parameter           Details
----------          -----------
direction           Inbound  connections are matched against ingress rules only
                    Outbound connections are matched against egress  rules only

source or           For the ingress direction, sources can be specified as part of the rule with IP addresses, 
destination         source tags or source service account

protocol and        Any rule can be restricted to apply to specific protocols only or specific cominations 
port                of protocols and ports only

action              To allow or deny packets that match the direction, protocol, port and source or destination of the rule 

priority            Governs the order in which rules are evaluated; the first matching rule is applied

Rule                All rules are assigned to all instances, but you can assign certain rules to certain instances only
Assignment



## Pricing
# Network Pricing
Traffic Type                                                Price
-------------                                               ------
Ingress                                                     No Charge  (unless a service is processing like Load Balancer)
Egress to the same zone (Internal IP Addr)                  No Charge  
Egress to Google products (YouTube, Maps, Drive)            No Charge  
Egress to a different GCP service                           No Charge  
   (within same region; exception)
Egress between zones in the same region (per GB)            $0.01
Egress to the same zone (via external IP Addr, per GB)      $0.01
Egress between regions within the US and Canada (per GB)    $0.01
Egress between regions, not including between US Regions    Varies by Region

# External IP address pricing (us-central1) 

Traffic Type                                                Price / Hour (USD)
-------------                                               -------------------
Static IP address (assigned but not used)                     $0.010
Static and ephemeral IP address in us on std VMs              $0.004
Static and ephemeral IP address in us on premptible VMs       $0.002
Static and ephemeral IP address attached to forwarding rules  No charge


GCP Pricing Calculator:  proviced estimated costs of service + traffic


Networks LAB: 
Note: The External IP addresses for both VM instances are ephemeral. If an instance is stopped, any ephemeral 
external IP addresses assigned to the instance are released back into the general Compute Engine pool and 
become available for use by other projects.

When a stopped instance is started again, a new ephemeral external IP address is assigned to the instance. 
Alternatively, you can reserve a static external IP address, which assigns the address to your project indefinitely 
until you explicitly release it. 


# create network and subnetwork via gcloud cli:

gcloud compute networks create managementnet --project=qwiklabs-gcp-03-ccd4b4168b56 \
  --subnet-mode=custom --mtu=1460 --bgp-routing-mode=regional


gcloud compute networks subnets create managementsubnet-us --project=qwiklabs-gcp-03-ccd4b4168b56 \
  --range=10.130.0.0/20 --stack-type=IPV4_ONLY --network=managementnet --region=us-central1

# firewall rules

gcloud compute --project=qwiklabs-gcp-03-ccd4b4168b56 firewall-rules create managementnet-allow-icmp-ssh-rdp \
  --direction=INGRESS --priority=1000 --network=managementnet --action=ALLOW --rules=tcp:22,tcp:3389,icmp --source-ranges=0.0.0.0/0


# gcloud instance 
gcloud compute instances create managementnet-us-vm --project=qwiklabs-gcp-03-ccd4b4168b56 --zone=us-central1-c \
  --machine-type=f1-micro --network-interface=network-tier=PREMIUM,subnet=managementsubnet-us --metadata=enable-oslogin=true \ 
  --maintenance-policy=MIGRATE --provisioning-model=STANDARD --service-account=995597317061-compute@developer.gserviceaccount.com \
  --scopes=https://www.googleapis.com/auth/devstorage.read_only,\
    https://www.googleapis.com/auth/logging.write,\
    https://www.googleapis.com/auth/monitoring.write,\
    https://www.googleapis.com/auth/servicecontrol,\
    https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append \
    --create-disk=auto-delete=yes,boot=yes,device-name=managementnet-us-vm,image=projects/debian-cloud/global/images/debian-11-bullseye-v20220920,\
    mode=rw,size=10,type=projects/qwiklabs-gcp-03-ccd4b4168b56/zones/us-central1-c/diskTypes/pd-balanced --no-shielded-secure-boot \
    --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any




## Common network designs
 - increase availability w/ multiple zones
    - 1 network -> 1 region -> 2 zones 

 - globalization: multiple regions
    - 1 network -> 2 region ->s 1 zone 

 - Cloud NAT provides internet access to private instaces


┌────────────────────────────────────────────────────────────────┐
│                                                                │
│     ┌─────────────────────────┐                                │
│     │      App Instances      │          ┌───────────┐         │
│     │    10.20.0.0/16         │          │           │         │
│     │                         │          │           │         │
│     └──────────────┬──────────┘          │           ├─────────┼────────────>  Update Server
│                    │                     │   Cloud   │         │                       
│                    │                     │   Nat     │         │
│                   ┌┴─────────────────────►           │         │
│                   │                      │           ├X────────┼───────────── Unauthorized
│     ┌─────────────┴───────────┐          │           │         │
│     │                         │          └───────────┘         │
│     │      App Instances      │                                │
│     │      10.21.0.0/16       │                                │
│     └─────────────────────────┘                                │
│                                                                │
└────────────────────────────────────────────────────────────────┘        public
                        private


- Private Google Access 
  - Access public ip address for Google APIs and Services for priv-only VMs 
  - enable on a subnet basis





NOTE: In order to connect to your private instance using SSH, you need to open an appropriate port on the firewall. 
IAP connections come from a specific set of IP addresses (35.235.240.0/20). 
Therefore, you can limit the rule to this CIDR range.

IAP = Identity-Aware Proxy: TCP forwarding
   - allows encrypted tunnel to forward SSH, RDP, etc. to VM instances

IAP Range: 35.235.240.0/20


NOTE: VM instances that have no external IP addresses can use Private Google Access to reach external IP addresses of Google APIs and services.


NOTE: Private Google Access is enabled at the subnet level. When it is enabled, instances in the subnet that only have private IP addresses 
  can send traffic to Google APIs and services through the default route (0.0.0.0/0) with a next hop to the default internet gateway.


# Cloud NAT is a regional resource. 
  - You can configure it to allow traffic from all ranges of all subnets in a region
  - from specific subnets in the region only
  - or from specific primary and secondary CIDR ranges only.
  - implements outbound NAT, but not inbound NAT.  
      - hosts outside of your VPC network can only respond to connections initiated by your instances




############################################
## Virtual Machines



.